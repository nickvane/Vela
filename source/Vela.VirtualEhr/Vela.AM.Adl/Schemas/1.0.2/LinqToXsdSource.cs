//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;

namespace schemas.openehr.org.v1 {
	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Diagnostics;
	using System.Xml;
	using System.Xml.Schema;
	using System.Xml.Linq;
	using Xml.Schema.Linq;


	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class DATA_VALUE : XTypedElement, IXMetaData
	{
		
		 public static explicit operator DATA_VALUE(XElement xe) {  return (DATA_VALUE)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public DATA_VALUE() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DATA_VALUE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_BOOLEAN : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_BOOLEAN(XElement xe) { return XTypedServices.ToXTypedElement<DV_BOOLEAN>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_BOOLEAN() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public DV_BOOLEAN() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public bool value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_BOOLEAN", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_BOOLEAN>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (issuer, assigner, id, type)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_IDENTIFIER : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_IDENTIFIER(XElement xe) { return XTypedServices.ToXTypedElement<DV_IDENTIFIER>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_IDENTIFIER() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("issuer", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assigner", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (issuer, assigner, id, type)
		/// </para>
		/// </summary>
		public DV_IDENTIFIER() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (issuer, assigner, id, type)
		/// </para>
		/// </summary>
		public string issuer {
			get {
				XElement x = this.GetElement(XName.Get("issuer", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("issuer", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (issuer, assigner, id, type)
		/// </para>
		/// </summary>
		public string assigner {
			get {
				XElement x = this.GetElement(XName.Get("assigner", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("assigner", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (issuer, assigner, id, type)
		/// </para>
		/// </summary>
		public string id {
			get {
				XElement x = this.GetElement(XName.Get("id", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("id", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (issuer, assigner, id, type)
		/// </para>
		/// </summary>
		public string type {
			get {
				XElement x = this.GetElement(XName.Get("type", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("type", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_IDENTIFIER", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_IDENTIFIER>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("issuer", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("assigner", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value, is_terminal)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_STATE : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_STATE(XElement xe) { return XTypedServices.ToXTypedElement<DV_STATE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_STATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("is_terminal", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value, is_terminal)
		/// </para>
		/// </summary>
		public DV_STATE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value, is_terminal)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return ((DV_CODED_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value, is_terminal)
		/// </para>
		/// </summary>
		public bool is_terminal {
			get {
				XElement x = this.GetElement(XName.Get("is_terminal", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("is_terminal", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_STATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_STATE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
			localElementDictionary.Add(XName.Get("is_terminal", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class DV_ORDERED : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<REFERENCE_RANGE> other_reference_rangesField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_ORDERED(XElement xe) {  return (DV_ORDERED)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_ORDERED() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?)
		/// </para>
		/// </summary>
		public DV_ORDERED() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?)
		/// </para>
		/// </summary>
		public DV_INTERVAL normal_range {
			get {
				XElement x = this.GetElement(XName.Get("normal_range", "http://schemas.openehr.org/v1"));
				return ((DV_INTERVAL)(x));
			}
			set {
				this.SetElement(XName.Get("normal_range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?)
		/// </para>
		/// </summary>
		public IList<REFERENCE_RANGE> other_reference_ranges {
			get {
				if ((this.other_reference_rangesField == null)) {
					this.other_reference_rangesField = new XTypedList<REFERENCE_RANGE>(this, LinqToXsdTypeManager.Instance, XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"));
				}
				return this.other_reference_rangesField;
			}
			set {
				if ((value == null)) {
					this.other_reference_rangesField = null;
				}
				else {
					if ((this.other_reference_rangesField == null)) {
						this.other_reference_rangesField = XTypedList<REFERENCE_RANGE>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<REFERENCE_RANGE>(this.other_reference_rangesField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?)
		/// </para>
		/// </summary>
		public CODE_PHRASE normal_status {
			get {
				XElement x = this.GetElement(XName.Get("normal_status", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("normal_status", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_ORDERED", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_INTERVAL : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_INTERVAL(XElement xe) { return XTypedServices.ToXTypedElement<DV_INTERVAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_INTERVAL() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public DV_INTERVAL() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public DV_ORDERED lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				return ((DV_ORDERED)(x));
			}
			set {
				this.SetElement(XName.Get("lower", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public DV_ORDERED upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				return ((DV_ORDERED)(x));
			}
			set {
				this.SetElement(XName.Get("upper", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public System.Nullable<bool> lower_included {
			get {
				XElement x = this.GetElement(XName.Get("lower_included", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("lower_included", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public System.Nullable<bool> upper_included {
			get {
				XElement x = this.GetElement(XName.Get("upper_included", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("upper_included", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public bool lower_unbounded {
			get {
				XElement x = this.GetElement(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (lower?, upper?, lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public bool upper_unbounded {
			get {
				XElement x = this.GetElement(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_INTERVAL", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_INTERVAL>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(DV_ORDERED));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(DV_ORDERED));
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (meaning, range)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class REFERENCE_RANGE : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator REFERENCE_RANGE(XElement xe) { return XTypedServices.ToXTypedElement<REFERENCE_RANGE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static REFERENCE_RANGE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meaning", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (meaning, range)
		/// </para>
		/// </summary>
		public REFERENCE_RANGE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (meaning, range)
		/// </para>
		/// </summary>
		public DV_TEXT meaning {
			get {
				XElement x = this.GetElement(XName.Get("meaning", "http://schemas.openehr.org/v1"));
				return ((DV_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("meaning", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (meaning, range)
		/// </para>
		/// </summary>
		public DV_INTERVAL range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((DV_INTERVAL)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("REFERENCE_RANGE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<REFERENCE_RANGE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("meaning", "http://schemas.openehr.org/v1"), typeof(DV_TEXT));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class DV_QUANTIFIED : global::schemas.openehr.org.v1.DV_ORDERED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_QUANTIFIED(XElement xe) {  return (DV_QUANTIFIED)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_QUANTIFIED() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?)
		/// </para>
		/// </summary>
		public DV_QUANTIFIED() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?)
		/// </para>
		/// </summary>
		public string magnitude_status {
			get {
				XElement x = this.GetElement(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_QUANTIFIED", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_COUNT : global::schemas.openehr.org.v1.DV_AMOUNT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_COUNT(XElement xe) { return XTypedServices.ToXTypedElement<DV_COUNT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_COUNT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude)
		/// </para>
		/// </summary>
		public DV_COUNT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude)
		/// </para>
		/// </summary>
		public long magnitude {
			get {
				XElement x = this.GetElement(XName.Get("magnitude", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
			}
			set {
				this.SetElement(XName.Get("magnitude", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_COUNT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_COUNT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("magnitude", "http://schemas.openehr.org/v1"), typeof(long));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_AMOUNT : global::schemas.openehr.org.v1.DV_QUANTIFIED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_AMOUNT(XElement xe) { return XTypedServices.ToXTypedElement<DV_AMOUNT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_AMOUNT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?)
		/// </para>
		/// </summary>
		public DV_AMOUNT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?)
		/// </para>
		/// </summary>
		public System.Nullable<float> accuracy {
			get {
				XElement x = this.GetElement(XName.Get("accuracy", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
			set {
				this.SetElement(XName.Get("accuracy", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?)
		/// </para>
		/// </summary>
		public System.Nullable<bool> accuracy_is_percent {
			get {
				XElement x = this.GetElement(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_AMOUNT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_AMOUNT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_TEMPORAL : global::schemas.openehr.org.v1.DV_QUANTIFIED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_TEMPORAL(XElement xe) { return XTypedServices.ToXTypedElement<DV_TEMPORAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_TEMPORAL() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?)
		/// </para>
		/// </summary>
		public DV_TEMPORAL() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?)
		/// </para>
		/// </summary>
		public DV_DURATION accuracy {
			get {
				XElement x = this.GetElement(XName.Get("accuracy", "http://schemas.openehr.org/v1"));
				return ((DV_DURATION)(x));
			}
			set {
				this.SetElement(XName.Get("accuracy", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_TEMPORAL", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_TEMPORAL>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(DV_DURATION));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude, units, precision?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_QUANTITY : global::schemas.openehr.org.v1.DV_AMOUNT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_QUANTITY(XElement xe) { return XTypedServices.ToXTypedElement<DV_QUANTITY>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_QUANTITY() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("units", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("precision", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude, units, precision?)
		/// </para>
		/// </summary>
		public DV_QUANTITY() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude, units, precision?)
		/// </para>
		/// </summary>
		public double magnitude {
			get {
				XElement x = this.GetElement(XName.Get("magnitude", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
			}
			set {
				this.SetElement(XName.Get("magnitude", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude, units, precision?)
		/// </para>
		/// </summary>
		public string units {
			get {
				XElement x = this.GetElement(XName.Get("units", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("units", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, magnitude, units, precision?)
		/// </para>
		/// </summary>
		public System.Nullable<int> precision {
			get {
				XElement x = this.GetElement(XName.Get("precision", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("precision", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_QUANTITY", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_QUANTITY>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("magnitude", "http://schemas.openehr.org/v1"), typeof(double));
			localElementDictionary.Add(XName.Get("units", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("precision", "http://schemas.openehr.org/v1"), typeof(int));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, value, symbol)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_ORDINAL : global::schemas.openehr.org.v1.DV_ORDERED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_ORDINAL(XElement xe) { return XTypedServices.ToXTypedElement<DV_ORDINAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_ORDINAL() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("symbol", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, value, symbol)
		/// </para>
		/// </summary>
		public DV_ORDINAL() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, value, symbol)
		/// </para>
		/// </summary>
		public int value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, value, symbol)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT symbol {
			get {
				XElement x = this.GetElement(XName.Get("symbol", "http://schemas.openehr.org/v1"));
				return ((DV_CODED_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("symbol", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_ORDINAL", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_ORDINAL>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(int));
			localElementDictionary.Add(XName.Get("symbol", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class PROPORTION_KIND
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
						0m,
						1m,
						2m,
						3m,
						4m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
		
		private PROPORTION_KIND() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, numerator, denominator, type, precision?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_PROPORTION : global::schemas.openehr.org.v1.DV_AMOUNT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_PROPORTION(XElement xe) { return XTypedServices.ToXTypedElement<DV_PROPORTION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_PROPORTION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("numerator", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("denominator", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("precision", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, numerator, denominator, type, precision?)
		/// </para>
		/// </summary>
		public DV_PROPORTION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, numerator, denominator, type, precision?)
		/// </para>
		/// </summary>
		public float numerator {
			get {
				XElement x = this.GetElement(XName.Get("numerator", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
			set {
				this.SetElement(XName.Get("numerator", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, numerator, denominator, type, precision?)
		/// </para>
		/// </summary>
		public float denominator {
			get {
				XElement x = this.GetElement(XName.Get("denominator", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
			set {
				this.SetElement(XName.Get("denominator", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, numerator, denominator, type, precision?)
		/// </para>
		/// </summary>
		public decimal type {
			get {
				XElement x = this.GetElement(XName.Get("type", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("type", "http://schemas.openehr.org/v1"), value, "type", global::schemas.openehr.org.v1.PROPORTION_KIND.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, numerator, denominator, type, precision?)
		/// </para>
		/// </summary>
		public System.Nullable<int> precision {
			get {
				XElement x = this.GetElement(XName.Get("precision", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("precision", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_PROPORTION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_PROPORTION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("numerator", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("denominator", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("precision", "http://schemas.openehr.org/v1"), typeof(int));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (items+)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_PARAGRAPH : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<DV_TEXT> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_PARAGRAPH(XElement xe) { return XTypedServices.ToXTypedElement<DV_PARAGRAPH>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_PARAGRAPH() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (items+)
		/// </para>
		/// </summary>
		public DV_PARAGRAPH() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (items+)
		/// </para>
		/// </summary>
		public IList<DV_TEXT> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<DV_TEXT>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<DV_TEXT>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<DV_TEXT>(this.itemsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_PARAGRAPH", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_PARAGRAPH>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(DV_TEXT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_TEXT : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<TERM_MAPPING> mappingsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_TEXT(XElement xe) { return XTypedServices.ToXTypedElement<DV_TEXT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_TEXT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("hyperlink", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("formatting", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("mappings", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("encoding", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public DV_TEXT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public DV_URI hyperlink {
			get {
				XElement x = this.GetElement(XName.Get("hyperlink", "http://schemas.openehr.org/v1"));
				return ((DV_URI)(x));
			}
			set {
				this.SetElement(XName.Get("hyperlink", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public string formatting {
			get {
				XElement x = this.GetElement(XName.Get("formatting", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("formatting", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public IList<TERM_MAPPING> mappings {
			get {
				if ((this.mappingsField == null)) {
					this.mappingsField = new XTypedList<TERM_MAPPING>(this, LinqToXsdTypeManager.Instance, XName.Get("mappings", "http://schemas.openehr.org/v1"));
				}
				return this.mappingsField;
			}
			set {
				if ((value == null)) {
					this.mappingsField = null;
				}
				else {
					if ((this.mappingsField == null)) {
						this.mappingsField = XTypedList<TERM_MAPPING>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("mappings", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<TERM_MAPPING>(this.mappingsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public CODE_PHRASE language {
			get {
				XElement x = this.GetElement(XName.Get("language", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("language", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?)
		/// </para>
		/// </summary>
		public CODE_PHRASE encoding {
			get {
				XElement x = this.GetElement(XName.Get("encoding", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("encoding", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_TEXT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_TEXT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("hyperlink", "http://schemas.openehr.org/v1"), typeof(DV_URI));
			localElementDictionary.Add(XName.Get("formatting", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("mappings", "http://schemas.openehr.org/v1"), typeof(TERM_MAPPING));
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("encoding", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?, defining_code)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_CODED_TEXT : global::schemas.openehr.org.v1.DV_TEXT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_CODED_TEXT(XElement xe) { return XTypedServices.ToXTypedElement<DV_CODED_TEXT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_CODED_TEXT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("hyperlink", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("formatting", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("mappings", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("encoding", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("defining_code", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?, defining_code)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value, hyperlink?, formatting?, mappings*, language?, encoding?, defining_code)
		/// </para>
		/// </summary>
		public CODE_PHRASE defining_code {
			get {
				XElement x = this.GetElement(XName.Get("defining_code", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("defining_code", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_CODED_TEXT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_CODED_TEXT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("hyperlink", "http://schemas.openehr.org/v1"), typeof(DV_URI));
			localElementDictionary.Add(XName.Get("formatting", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("mappings", "http://schemas.openehr.org/v1"), typeof(TERM_MAPPING));
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("encoding", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("defining_code", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (terminology_id, code_string)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class CODE_PHRASE : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator CODE_PHRASE(XElement xe) { return XTypedServices.ToXTypedElement<CODE_PHRASE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static CODE_PHRASE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("terminology_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("code_string", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (terminology_id, code_string)
		/// </para>
		/// </summary>
		public CODE_PHRASE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (terminology_id, code_string)
		/// </para>
		/// </summary>
		public TERMINOLOGY_ID terminology_id {
			get {
				XElement x = this.GetElement(XName.Get("terminology_id", "http://schemas.openehr.org/v1"));
				return ((TERMINOLOGY_ID)(x));
			}
			set {
				this.SetElement(XName.Get("terminology_id", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (terminology_id, code_string)
		/// </para>
		/// </summary>
		public string code_string {
			get {
				XElement x = this.GetElement(XName.Get("code_string", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("code_string", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("CODE_PHRASE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<CODE_PHRASE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("terminology_id", "http://schemas.openehr.org/v1"), typeof(TERMINOLOGY_ID));
			localElementDictionary.Add(XName.Get("code_string", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (match, purpose?, target)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TERM_MAPPING : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TERM_MAPPING(XElement xe) { return XTypedServices.ToXTypedElement<TERM_MAPPING>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TERM_MAPPING() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("match", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("purpose", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("target", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (match, purpose?, target)
		/// </para>
		/// </summary>
		public TERM_MAPPING() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (match, purpose?, target)
		/// </para>
		/// </summary>
		public string match {
			get {
				XElement x = this.GetElement(XName.Get("match", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("match", "http://schemas.openehr.org/v1"), value, "match", global::schemas.openehr.org.v1.matchString.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (match, purpose?, target)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT purpose {
			get {
				XElement x = this.GetElement(XName.Get("purpose", "http://schemas.openehr.org/v1"));
				return ((DV_CODED_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("purpose", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (match, purpose?, target)
		/// </para>
		/// </summary>
		public CODE_PHRASE target {
			get {
				XElement x = this.GetElement(XName.Get("target", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("target", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TERM_MAPPING", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TERM_MAPPING>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("match", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("purpose", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
			localElementDictionary.Add(XName.Get("target", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class Iso8601DateTime
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						@"\d{4}((0[1-9]|1[0-2])((0[1-9]|[12]\d|3[01])(T?([01]\d|2[0-3])([0-5]\d([0-5]\d([,.]\d+)?)?)?(Z|([+\-]((0\d)|(1[0-2]))(00|30)?))?)?)?)?|\d{4}(\-(0[1-9]|1[0-2])(\-(0[1-9]|[12]\d|3[01])(T([01]\d|2[0-3])(:[0-5]\d(:[0-5]\d([,.]\d+)?)?)?(Z|([+\-]((0\d)|(1[0-2]))(:(00|30))?))?)?)?)?"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private Iso8601DateTime() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class Iso8601Date
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"\\d{4}((((0[1-9])|(1[0-2]))((0[1-9])|([12]\\d)|(3[01]))?)?|(\\-(((0[1-9])|(1[0-2]))(" +
							"\\-((0[1-9])|([12]\\d)|(3[01])))?)?)?)"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private Iso8601Date() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class Iso8601Time
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"([01]\\d|2[0-3])([0-5]\\d([0-5]\\d([,.]\\d+)?)?)?(Z|([+\\-]((0\\d)|(1[0-2]))(00|30)?))?" +
							"|([01]\\d|2[0-3])(:[0-5]\\d(:[0-5]\\d([,.]\\d+)?)?)?(Z|([+\\-]((0\\d)|(1[0-2]))(:(00|3" +
							"0))?))?"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private Iso8601Time() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class Iso8601Duration
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d+)?S)?)?"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private Iso8601Duration() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_DATE_TIME : global::schemas.openehr.org.v1.DV_TEMPORAL, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_DATE_TIME(XElement xe) { return XTypedServices.ToXTypedElement<DV_DATE_TIME>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_DATE_TIME() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
		/// </para>
		/// </summary>
		public DV_DATE_TIME() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("value", "http://schemas.openehr.org/v1"), value, "value", global::schemas.openehr.org.v1.Iso8601DateTime.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_DATE_TIME", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_DATE_TIME>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(DV_DURATION));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_TIME : global::schemas.openehr.org.v1.DV_TEMPORAL, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_TIME(XElement xe) { return XTypedServices.ToXTypedElement<DV_TIME>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_TIME() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
		/// </para>
		/// </summary>
		public DV_TIME() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("value", "http://schemas.openehr.org/v1"), value, "value", global::schemas.openehr.org.v1.Iso8601Time.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_TIME", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_TIME>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(DV_DURATION));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_DATE : global::schemas.openehr.org.v1.DV_TEMPORAL, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_DATE(XElement xe) { return XTypedServices.ToXTypedElement<DV_DATE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_DATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
		/// </para>
		/// </summary>
		public DV_DATE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, value)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("value", "http://schemas.openehr.org/v1"), value, "value", global::schemas.openehr.org.v1.Iso8601Date.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_DATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_DATE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(DV_DURATION));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_DURATION : global::schemas.openehr.org.v1.DV_AMOUNT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_DURATION(XElement xe) { return XTypedServices.ToXTypedElement<DV_DURATION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_DURATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("normal_range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("normal_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("magnitude_status", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, value)
		/// </para>
		/// </summary>
		public DV_DURATION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (normal_range?, other_reference_ranges*, normal_status?, magnitude_status?, accuracy?, accuracy_is_percent?, value)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("value", "http://schemas.openehr.org/v1"), value, "value", global::schemas.openehr.org.v1.Iso8601Duration.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_DURATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_DURATION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("normal_range", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("other_reference_ranges", "http://schemas.openehr.org/v1"), typeof(REFERENCE_RANGE));
			localElementDictionary.Add(XName.Get("normal_status", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("magnitude_status", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("accuracy", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("accuracy_is_percent", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class DV_TIME_SPECIFICATION : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_TIME_SPECIFICATION(XElement xe) {  return (DV_TIME_SPECIFICATION)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_TIME_SPECIFICATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public DV_TIME_SPECIFICATION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public DV_PARSABLE value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return ((DV_PARSABLE)(x));
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_TIME_SPECIFICATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(DV_PARSABLE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_PERIODIC_TIME_SPECIFICATION : global::schemas.openehr.org.v1.DV_TIME_SPECIFICATION, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_PERIODIC_TIME_SPECIFICATION(XElement xe) { return XTypedServices.ToXTypedElement<DV_PERIODIC_TIME_SPECIFICATION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_PERIODIC_TIME_SPECIFICATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public DV_PERIODIC_TIME_SPECIFICATION() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_PERIODIC_TIME_SPECIFICATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_PERIODIC_TIME_SPECIFICATION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(DV_PARSABLE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_GENERAL_TIME_SPECIFICATION : global::schemas.openehr.org.v1.DV_TIME_SPECIFICATION, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_GENERAL_TIME_SPECIFICATION(XElement xe) { return XTypedServices.ToXTypedElement<DV_GENERAL_TIME_SPECIFICATION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_GENERAL_TIME_SPECIFICATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public DV_GENERAL_TIME_SPECIFICATION() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_GENERAL_TIME_SPECIFICATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_GENERAL_TIME_SPECIFICATION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(DV_PARSABLE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (charset?, language?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class DV_ENCAPSULATED : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_ENCAPSULATED(XElement xe) {  return (DV_ENCAPSULATED)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_ENCAPSULATED() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("charset", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (charset?, language?)
		/// </para>
		/// </summary>
		public DV_ENCAPSULATED() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?)
		/// </para>
		/// </summary>
		public CODE_PHRASE charset {
			get {
				XElement x = this.GetElement(XName.Get("charset", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("charset", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?)
		/// </para>
		/// </summary>
		public CODE_PHRASE language {
			get {
				XElement x = this.GetElement(XName.Get("language", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("language", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_ENCAPSULATED", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("charset", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_MULTIMEDIA : global::schemas.openehr.org.v1.DV_ENCAPSULATED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_MULTIMEDIA(XElement xe) { return XTypedServices.ToXTypedElement<DV_MULTIMEDIA>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_MULTIMEDIA() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("charset", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("alternate_text", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("uri", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("data", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("media_type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("compression_algorithm", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("integrity_check", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("integrity_check_algorithm", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("size", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("thumbnail", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public DV_MULTIMEDIA() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public string alternate_text {
			get {
				XElement x = this.GetElement(XName.Get("alternate_text", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("alternate_text", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public DV_URI uri {
			get {
				XElement x = this.GetElement(XName.Get("uri", "http://schemas.openehr.org/v1"));
				return ((DV_URI)(x));
			}
			set {
				this.SetElement(XName.Get("uri", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public byte[] data {
			get {
				XElement x = this.GetElement(XName.Get("data", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
			}
			set {
				this.SetElement(XName.Get("data", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public CODE_PHRASE media_type {
			get {
				XElement x = this.GetElement(XName.Get("media_type", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("media_type", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public CODE_PHRASE compression_algorithm {
			get {
				XElement x = this.GetElement(XName.Get("compression_algorithm", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("compression_algorithm", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public byte[] integrity_check {
			get {
				XElement x = this.GetElement(XName.Get("integrity_check", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
			}
			set {
				this.SetElement(XName.Get("integrity_check", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public CODE_PHRASE integrity_check_algorithm {
			get {
				XElement x = this.GetElement(XName.Get("integrity_check_algorithm", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("integrity_check_algorithm", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public int size {
			get {
				XElement x = this.GetElement(XName.Get("size", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("size", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, alternate_text?, uri?, data?, media_type, compression_algorithm?, integrity_check?, integrity_check_algorithm?, size, thumbnail?)
		/// </para>
		/// </summary>
		public DV_MULTIMEDIA thumbnail {
			get {
				XElement x = this.GetElement(XName.Get("thumbnail", "http://schemas.openehr.org/v1"));
				return ((DV_MULTIMEDIA)(x));
			}
			set {
				this.SetElement(XName.Get("thumbnail", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_MULTIMEDIA", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_MULTIMEDIA>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("charset", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("alternate_text", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("uri", "http://schemas.openehr.org/v1"), typeof(DV_URI));
			localElementDictionary.Add(XName.Get("data", "http://schemas.openehr.org/v1"), typeof(byte[]));
			localElementDictionary.Add(XName.Get("media_type", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("compression_algorithm", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("integrity_check", "http://schemas.openehr.org/v1"), typeof(byte[]));
			localElementDictionary.Add(XName.Get("integrity_check_algorithm", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("size", "http://schemas.openehr.org/v1"), typeof(int));
			localElementDictionary.Add(XName.Get("thumbnail", "http://schemas.openehr.org/v1"), typeof(DV_MULTIMEDIA));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (charset?, language?, value, formalism)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_PARSABLE : global::schemas.openehr.org.v1.DV_ENCAPSULATED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_PARSABLE(XElement xe) { return XTypedServices.ToXTypedElement<DV_PARSABLE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_PARSABLE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("charset", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("formalism", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (charset?, language?, value, formalism)
		/// </para>
		/// </summary>
		public DV_PARSABLE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, value, formalism)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (charset?, language?, value, formalism)
		/// </para>
		/// </summary>
		public string formalism {
			get {
				XElement x = this.GetElement(XName.Get("formalism", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("formalism", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_PARSABLE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_PARSABLE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("charset", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("formalism", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_URI : global::schemas.openehr.org.v1.DATA_VALUE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_URI(XElement xe) { return XTypedServices.ToXTypedElement<DV_URI>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_URI() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value?)
		/// </para>
		/// </summary>
		public DV_URI() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (value?)
		/// </para>
		/// </summary>
		public System.Uri value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_URI", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_URI>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(System.Uri));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class DV_EHR_URI : global::schemas.openehr.org.v1.DV_URI, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator DV_EHR_URI(XElement xe) { return XTypedServices.ToXTypedElement<DV_EHR_URI>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static DV_EHR_URI() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value?)
		/// </para>
		/// </summary>
		public DV_EHR_URI() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("DV_EHR_URI", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<DV_EHR_URI>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(System.Uri));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class matchString
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"\\?",
						"<",
						">",
						"="}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private matchString() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class archetypeNodeId
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"([a-zA-Z][\\w_]*-[\\w][\\w_]*-[\\w][\\w_]*\\.[\\w][\\w_]*(-[\\w][\\w_]*)*\\.v\\d+(\\.\\d)*)|(at" +
							"(0\\.[0-9]{1,4}|[0-9]{4})(\\.[0-9]{1,3})*)"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private archetypeNodeId() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class atCode
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"at(0\\.[0-9]{1,4}|[0-9]{4})(\\.[0-9]{1,3})*"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private atCode() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class OBJECT_ID : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator OBJECT_ID(XElement xe) {  return (OBJECT_ID)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static OBJECT_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public OBJECT_ID() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public string value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("OBJECT_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class UID_BASED_ID : global::schemas.openehr.org.v1.OBJECT_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator UID_BASED_ID(XElement xe) {  return (UID_BASED_ID)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static UID_BASED_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public UID_BASED_ID() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("UID_BASED_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class OBJECT_VERSION_ID : global::schemas.openehr.org.v1.UID_BASED_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator OBJECT_VERSION_ID(XElement xe) { return XTypedServices.ToXTypedElement<OBJECT_VERSION_ID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static OBJECT_VERSION_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public OBJECT_VERSION_ID() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("OBJECT_VERSION_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<OBJECT_VERSION_ID>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ARCHETYPE_ID : global::schemas.openehr.org.v1.OBJECT_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ARCHETYPE_ID(XElement xe) { return XTypedServices.ToXTypedElement<ARCHETYPE_ID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ARCHETYPE_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public ARCHETYPE_ID() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ARCHETYPE_ID>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TEMPLATE_ID : global::schemas.openehr.org.v1.OBJECT_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TEMPLATE_ID(XElement xe) { return XTypedServices.ToXTypedElement<TEMPLATE_ID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TEMPLATE_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public TEMPLATE_ID() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TEMPLATE_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TEMPLATE_ID>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TERMINOLOGY_ID : global::schemas.openehr.org.v1.OBJECT_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TERMINOLOGY_ID(XElement xe) { return XTypedServices.ToXTypedElement<TERMINOLOGY_ID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TERMINOLOGY_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public TERMINOLOGY_ID() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TERMINOLOGY_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TERMINOLOGY_ID>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class HIER_OBJECT_ID : global::schemas.openehr.org.v1.UID_BASED_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator HIER_OBJECT_ID(XElement xe) { return XTypedServices.ToXTypedElement<HIER_OBJECT_ID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static HIER_OBJECT_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public HIER_OBJECT_ID() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("HIER_OBJECT_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<HIER_OBJECT_ID>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value, scheme)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class GENERIC_ID : global::schemas.openehr.org.v1.OBJECT_ID, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator GENERIC_ID(XElement xe) { return XTypedServices.ToXTypedElement<GENERIC_ID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static GENERIC_ID() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("scheme", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value, scheme)
		/// </para>
		/// </summary>
		public GENERIC_ID() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value, scheme)
		/// </para>
		/// </summary>
		public string scheme {
			get {
				XElement x = this.GetElement(XName.Get("scheme", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("scheme", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("GENERIC_ID", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<GENERIC_ID>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("scheme", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (id, @namespace, type)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class OBJECT_REF : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator OBJECT_REF(XElement xe) { return XTypedServices.ToXTypedElement<OBJECT_REF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static OBJECT_REF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("namespace", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (id, @namespace, type)
		/// </para>
		/// </summary>
		public OBJECT_REF() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (id, @namespace, type)
		/// </para>
		/// </summary>
		public OBJECT_ID id {
			get {
				XElement x = this.GetElement(XName.Get("id", "http://schemas.openehr.org/v1"));
				return ((OBJECT_ID)(x));
			}
			set {
				this.SetElement(XName.Get("id", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (id, @namespace, type)
		/// </para>
		/// </summary>
		public string @namespace {
			get {
				XElement x = this.GetElement(XName.Get("namespace", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
			}
			set {
				this.SetElement(XName.Get("namespace", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (id, @namespace, type)
		/// </para>
		/// </summary>
		public string type {
			get {
				XElement x = this.GetElement(XName.Get("type", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
			}
			set {
				this.SetElement(XName.Get("type", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("OBJECT_REF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<OBJECT_REF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("id", "http://schemas.openehr.org/v1"), typeof(OBJECT_ID));
			localElementDictionary.Add(XName.Get("namespace", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (id, @namespace, type)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class PARTY_REF : global::schemas.openehr.org.v1.OBJECT_REF, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator PARTY_REF(XElement xe) { return XTypedServices.ToXTypedElement<PARTY_REF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static PARTY_REF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("namespace", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (id, @namespace, type)
		/// </para>
		/// </summary>
		public PARTY_REF() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("PARTY_REF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<PARTY_REF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("id", "http://schemas.openehr.org/v1"), typeof(OBJECT_ID));
			localElementDictionary.Add(XName.Get("namespace", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (id, @namespace, type)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ACCESS_GROUP_REF : global::schemas.openehr.org.v1.OBJECT_REF, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ACCESS_GROUP_REF(XElement xe) { return XTypedServices.ToXTypedElement<ACCESS_GROUP_REF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ACCESS_GROUP_REF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("namespace", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (id, @namespace, type)
		/// </para>
		/// </summary>
		public ACCESS_GROUP_REF() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ACCESS_GROUP_REF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ACCESS_GROUP_REF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("id", "http://schemas.openehr.org/v1"), typeof(OBJECT_ID));
			localElementDictionary.Add(XName.Get("namespace", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (id, @namespace, type, path?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class LOCATABLE_REF : global::schemas.openehr.org.v1.OBJECT_REF, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator LOCATABLE_REF(XElement xe) { return XTypedServices.ToXTypedElement<LOCATABLE_REF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static LOCATABLE_REF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("namespace", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("path", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (id, @namespace, type, path?)
		/// </para>
		/// </summary>
		public LOCATABLE_REF() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (id, @namespace, type, path?)
		/// </para>
		/// </summary>
		public string path {
			get {
				XElement x = this.GetElement(XName.Get("path", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("path", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("LOCATABLE_REF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<LOCATABLE_REF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("id", "http://schemas.openehr.org/v1"), typeof(OBJECT_ID));
			localElementDictionary.Add(XName.Get("namespace", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("path", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (version_id, audits+)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class REVISION_HISTORY_ITEM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<AUDIT_DETAILS> auditsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator REVISION_HISTORY_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<REVISION_HISTORY_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static REVISION_HISTORY_ITEM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("version_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("audits", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (version_id, audits+)
		/// </para>
		/// </summary>
		public REVISION_HISTORY_ITEM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (version_id, audits+)
		/// </para>
		/// </summary>
		public OBJECT_VERSION_ID version_id {
			get {
				XElement x = this.GetElement(XName.Get("version_id", "http://schemas.openehr.org/v1"));
				return ((OBJECT_VERSION_ID)(x));
			}
			set {
				this.SetElement(XName.Get("version_id", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (version_id, audits+)
		/// </para>
		/// </summary>
		public IList<AUDIT_DETAILS> audits {
			get {
				if ((this.auditsField == null)) {
					this.auditsField = new XTypedList<AUDIT_DETAILS>(this, LinqToXsdTypeManager.Instance, XName.Get("audits", "http://schemas.openehr.org/v1"));
				}
				return this.auditsField;
			}
			set {
				if ((value == null)) {
					this.auditsField = null;
				}
				else {
					if ((this.auditsField == null)) {
						this.auditsField = XTypedList<AUDIT_DETAILS>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("audits", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<AUDIT_DETAILS>(this.auditsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("REVISION_HISTORY_ITEM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<REVISION_HISTORY_ITEM>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("version_id", "http://schemas.openehr.org/v1"), typeof(OBJECT_VERSION_ID));
			localElementDictionary.Add(XName.Get("audits", "http://schemas.openehr.org/v1"), typeof(AUDIT_DETAILS));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (items*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class REVISION_HISTORY : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<REVISION_HISTORY_ITEM> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator REVISION_HISTORY(XElement xe) { return XTypedServices.ToXTypedElement<REVISION_HISTORY>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static REVISION_HISTORY() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public REVISION_HISTORY() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public IList<REVISION_HISTORY_ITEM> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<REVISION_HISTORY_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<REVISION_HISTORY_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<REVISION_HISTORY_ITEM>(this.itemsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("REVISION_HISTORY", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<REVISION_HISTORY>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(REVISION_HISTORY_ITEM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (system_id, committer, time_committed, change_type, description?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class AUDIT_DETAILS : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator AUDIT_DETAILS(XElement xe) { return XTypedServices.ToXTypedElement<AUDIT_DETAILS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static AUDIT_DETAILS() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("system_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("committer", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("time_committed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("change_type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("description", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?)
		/// </para>
		/// </summary>
		public AUDIT_DETAILS() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?)
		/// </para>
		/// </summary>
		public string system_id {
			get {
				XElement x = this.GetElement(XName.Get("system_id", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("system_id", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?)
		/// </para>
		/// </summary>
		public PARTY_PROXY committer {
			get {
				XElement x = this.GetElement(XName.Get("committer", "http://schemas.openehr.org/v1"));
				return ((PARTY_PROXY)(x));
			}
			set {
				this.SetElement(XName.Get("committer", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?)
		/// </para>
		/// </summary>
		public DV_DATE_TIME time_committed {
			get {
				XElement x = this.GetElement(XName.Get("time_committed", "http://schemas.openehr.org/v1"));
				return ((DV_DATE_TIME)(x));
			}
			set {
				this.SetElement(XName.Get("time_committed", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT change_type {
			get {
				XElement x = this.GetElement(XName.Get("change_type", "http://schemas.openehr.org/v1"));
				return ((DV_CODED_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("change_type", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?)
		/// </para>
		/// </summary>
		public DV_TEXT description {
			get {
				XElement x = this.GetElement(XName.Get("description", "http://schemas.openehr.org/v1"));
				return ((DV_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("description", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("AUDIT_DETAILS", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<AUDIT_DETAILS>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("system_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("committer", "http://schemas.openehr.org/v1"), typeof(PARTY_PROXY));
			localElementDictionary.Add(XName.Get("time_committed", "http://schemas.openehr.org/v1"), typeof(DV_DATE_TIME));
			localElementDictionary.Add(XName.Get("change_type", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
			localElementDictionary.Add(XName.Get("description", "http://schemas.openehr.org/v1"), typeof(DV_TEXT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ATTESTATION : global::schemas.openehr.org.v1.AUDIT_DETAILS, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<DV_EHR_URI> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ATTESTATION(XElement xe) { return XTypedServices.ToXTypedElement<ATTESTATION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ATTESTATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("system_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("committer", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("time_committed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("change_type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("description", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("attested_view", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("proof", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("reason", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("is_pending", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
		/// </para>
		/// </summary>
		public ATTESTATION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
		/// </para>
		/// </summary>
		public DV_MULTIMEDIA attested_view {
			get {
				XElement x = this.GetElement(XName.Get("attested_view", "http://schemas.openehr.org/v1"));
				return ((DV_MULTIMEDIA)(x));
			}
			set {
				this.SetElement(XName.Get("attested_view", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
		/// </para>
		/// </summary>
		public string proof {
			get {
				XElement x = this.GetElement(XName.Get("proof", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("proof", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
		/// </para>
		/// </summary>
		public IList<DV_EHR_URI> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<DV_EHR_URI>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<DV_EHR_URI>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<DV_EHR_URI>(this.itemsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
		/// </para>
		/// </summary>
		public DV_TEXT reason {
			get {
				XElement x = this.GetElement(XName.Get("reason", "http://schemas.openehr.org/v1"));
				return ((DV_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("reason", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, committer, time_committed, change_type, description?, attested_view?, proof?, items*, reason, is_pending)
		/// </para>
		/// </summary>
		public bool is_pending {
			get {
				XElement x = this.GetElement(XName.Get("is_pending", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("is_pending", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ATTESTATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ATTESTATION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("system_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("committer", "http://schemas.openehr.org/v1"), typeof(PARTY_PROXY));
			localElementDictionary.Add(XName.Get("time_committed", "http://schemas.openehr.org/v1"), typeof(DV_DATE_TIME));
			localElementDictionary.Add(XName.Get("change_type", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
			localElementDictionary.Add(XName.Get("description", "http://schemas.openehr.org/v1"), typeof(DV_TEXT));
			localElementDictionary.Add(XName.Get("attested_view", "http://schemas.openehr.org/v1"), typeof(DV_MULTIMEDIA));
			localElementDictionary.Add(XName.Get("proof", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(DV_EHR_URI));
			localElementDictionary.Add(XName.Get("reason", "http://schemas.openehr.org/v1"), typeof(DV_TEXT));
			localElementDictionary.Add(XName.Get("is_pending", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (external_ref?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class PARTY_PROXY : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator PARTY_PROXY(XElement xe) {  return (PARTY_PROXY)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static PARTY_PROXY() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("external_ref", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (external_ref?)
		/// </para>
		/// </summary>
		public PARTY_PROXY() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (external_ref?)
		/// </para>
		/// </summary>
		public PARTY_REF external_ref {
			get {
				XElement x = this.GetElement(XName.Get("external_ref", "http://schemas.openehr.org/v1"));
				return ((PARTY_REF)(x));
			}
			set {
				this.SetElement(XName.Get("external_ref", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("PARTY_PROXY", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("external_ref", "http://schemas.openehr.org/v1"), typeof(PARTY_REF));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (external_ref?, name?, identifiers*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class PARTY_IDENTIFIED : global::schemas.openehr.org.v1.PARTY_PROXY, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<DV_IDENTIFIER> identifiersField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator PARTY_IDENTIFIED(XElement xe) { return XTypedServices.ToXTypedElement<PARTY_IDENTIFIED>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static PARTY_IDENTIFIED() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("external_ref", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("identifiers", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (external_ref?, name?, identifiers*)
		/// </para>
		/// </summary>
		public PARTY_IDENTIFIED() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (external_ref?, name?, identifiers*)
		/// </para>
		/// </summary>
		public string name {
			get {
				XElement x = this.GetElement(XName.Get("name", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("name", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (external_ref?, name?, identifiers*)
		/// </para>
		/// </summary>
		public IList<DV_IDENTIFIER> identifiers {
			get {
				if ((this.identifiersField == null)) {
					this.identifiersField = new XTypedList<DV_IDENTIFIER>(this, LinqToXsdTypeManager.Instance, XName.Get("identifiers", "http://schemas.openehr.org/v1"));
				}
				return this.identifiersField;
			}
			set {
				if ((value == null)) {
					this.identifiersField = null;
				}
				else {
					if ((this.identifiersField == null)) {
						this.identifiersField = XTypedList<DV_IDENTIFIER>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("identifiers", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<DV_IDENTIFIER>(this.identifiersField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("PARTY_IDENTIFIED", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<PARTY_IDENTIFIED>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("external_ref", "http://schemas.openehr.org/v1"), typeof(PARTY_REF));
			localElementDictionary.Add(XName.Get("name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("identifiers", "http://schemas.openehr.org/v1"), typeof(DV_IDENTIFIER));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (external_ref?, name?, identifiers*, relationship)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class PARTY_RELATED : global::schemas.openehr.org.v1.PARTY_IDENTIFIED, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator PARTY_RELATED(XElement xe) { return XTypedServices.ToXTypedElement<PARTY_RELATED>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static PARTY_RELATED() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("external_ref", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("identifiers", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("relationship", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (external_ref?, name?, identifiers*, relationship)
		/// </para>
		/// </summary>
		public PARTY_RELATED() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (external_ref?, name?, identifiers*, relationship)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT relationship {
			get {
				XElement x = this.GetElement(XName.Get("relationship", "http://schemas.openehr.org/v1"));
				return ((DV_CODED_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("relationship", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("PARTY_RELATED", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<PARTY_RELATED>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("external_ref", "http://schemas.openehr.org/v1"), typeof(PARTY_REF));
			localElementDictionary.Add(XName.Get("name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("identifiers", "http://schemas.openehr.org/v1"), typeof(DV_IDENTIFIER));
			localElementDictionary.Add(XName.Get("relationship", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (external_ref?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class PARTY_SELF : global::schemas.openehr.org.v1.PARTY_PROXY, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator PARTY_SELF(XElement xe) { return XTypedServices.ToXTypedElement<PARTY_SELF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static PARTY_SELF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("external_ref", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (external_ref?)
		/// </para>
		/// </summary>
		public PARTY_SELF() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("PARTY_SELF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<PARTY_SELF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("external_ref", "http://schemas.openehr.org/v1"), typeof(PARTY_REF));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (function, performer, time?, mode)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class PARTICIPATION : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator PARTICIPATION(XElement xe) { return XTypedServices.ToXTypedElement<PARTICIPATION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static PARTICIPATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("function", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("performer", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("time", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("mode", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (function, performer, time?, mode)
		/// </para>
		/// </summary>
		public PARTICIPATION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (function, performer, time?, mode)
		/// </para>
		/// </summary>
		public DV_TEXT function {
			get {
				XElement x = this.GetElement(XName.Get("function", "http://schemas.openehr.org/v1"));
				return ((DV_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("function", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (function, performer, time?, mode)
		/// </para>
		/// </summary>
		public PARTY_PROXY performer {
			get {
				XElement x = this.GetElement(XName.Get("performer", "http://schemas.openehr.org/v1"));
				return ((PARTY_PROXY)(x));
			}
			set {
				this.SetElement(XName.Get("performer", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (function, performer, time?, mode)
		/// </para>
		/// </summary>
		public DV_INTERVAL time {
			get {
				XElement x = this.GetElement(XName.Get("time", "http://schemas.openehr.org/v1"));
				return ((DV_INTERVAL)(x));
			}
			set {
				this.SetElement(XName.Get("time", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (function, performer, time?, mode)
		/// </para>
		/// </summary>
		public DV_CODED_TEXT mode {
			get {
				XElement x = this.GetElement(XName.Get("mode", "http://schemas.openehr.org/v1"));
				return ((DV_CODED_TEXT)(x));
			}
			set {
				this.SetElement(XName.Get("mode", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("PARTICIPATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<PARTICIPATION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("function", "http://schemas.openehr.org/v1"), typeof(DV_TEXT));
			localElementDictionary.Add(XName.Get("performer", "http://schemas.openehr.org/v1"), typeof(PARTY_PROXY));
			localElementDictionary.Add(XName.Get("time", "http://schemas.openehr.org/v1"), typeof(DV_INTERVAL));
			localElementDictionary.Add(XName.Get("mode", "http://schemas.openehr.org/v1"), typeof(DV_CODED_TEXT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class FEEDER_AUDIT : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<DV_IDENTIFIER> originating_system_item_idsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<DV_IDENTIFIER> feeder_system_item_idsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator FEEDER_AUDIT(XElement xe) { return XTypedServices.ToXTypedElement<FEEDER_AUDIT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static FEEDER_AUDIT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("originating_system_item_ids", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("feeder_system_item_ids", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("original_content", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("originating_system_audit", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("feeder_system_audit", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
		/// </para>
		/// </summary>
		public FEEDER_AUDIT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
		/// </para>
		/// </summary>
		public IList<DV_IDENTIFIER> originating_system_item_ids {
			get {
				if ((this.originating_system_item_idsField == null)) {
					this.originating_system_item_idsField = new XTypedList<DV_IDENTIFIER>(this, LinqToXsdTypeManager.Instance, XName.Get("originating_system_item_ids", "http://schemas.openehr.org/v1"));
				}
				return this.originating_system_item_idsField;
			}
			set {
				if ((value == null)) {
					this.originating_system_item_idsField = null;
				}
				else {
					if ((this.originating_system_item_idsField == null)) {
						this.originating_system_item_idsField = XTypedList<DV_IDENTIFIER>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("originating_system_item_ids", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<DV_IDENTIFIER>(this.originating_system_item_idsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
		/// </para>
		/// </summary>
		public IList<DV_IDENTIFIER> feeder_system_item_ids {
			get {
				if ((this.feeder_system_item_idsField == null)) {
					this.feeder_system_item_idsField = new XTypedList<DV_IDENTIFIER>(this, LinqToXsdTypeManager.Instance, XName.Get("feeder_system_item_ids", "http://schemas.openehr.org/v1"));
				}
				return this.feeder_system_item_idsField;
			}
			set {
				if ((value == null)) {
					this.feeder_system_item_idsField = null;
				}
				else {
					if ((this.feeder_system_item_idsField == null)) {
						this.feeder_system_item_idsField = XTypedList<DV_IDENTIFIER>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("feeder_system_item_ids", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<DV_IDENTIFIER>(this.feeder_system_item_idsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
		/// </para>
		/// </summary>
		public DV_ENCAPSULATED original_content {
			get {
				XElement x = this.GetElement(XName.Get("original_content", "http://schemas.openehr.org/v1"));
				return ((DV_ENCAPSULATED)(x));
			}
			set {
				this.SetElement(XName.Get("original_content", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
		/// </para>
		/// </summary>
		public FEEDER_AUDIT_DETAILS originating_system_audit {
			get {
				XElement x = this.GetElement(XName.Get("originating_system_audit", "http://schemas.openehr.org/v1"));
				return ((FEEDER_AUDIT_DETAILS)(x));
			}
			set {
				this.SetElement(XName.Get("originating_system_audit", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (originating_system_item_ids*, feeder_system_item_ids*, original_content?, originating_system_audit, feeder_system_audit?)
		/// </para>
		/// </summary>
		public FEEDER_AUDIT_DETAILS feeder_system_audit {
			get {
				XElement x = this.GetElement(XName.Get("feeder_system_audit", "http://schemas.openehr.org/v1"));
				return ((FEEDER_AUDIT_DETAILS)(x));
			}
			set {
				this.SetElement(XName.Get("feeder_system_audit", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("FEEDER_AUDIT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<FEEDER_AUDIT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("originating_system_item_ids", "http://schemas.openehr.org/v1"), typeof(DV_IDENTIFIER));
			localElementDictionary.Add(XName.Get("feeder_system_item_ids", "http://schemas.openehr.org/v1"), typeof(DV_IDENTIFIER));
			localElementDictionary.Add(XName.Get("original_content", "http://schemas.openehr.org/v1"), typeof(DV_ENCAPSULATED));
			localElementDictionary.Add(XName.Get("originating_system_audit", "http://schemas.openehr.org/v1"), typeof(FEEDER_AUDIT_DETAILS));
			localElementDictionary.Add(XName.Get("feeder_system_audit", "http://schemas.openehr.org/v1"), typeof(FEEDER_AUDIT_DETAILS));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class FEEDER_AUDIT_DETAILS : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator FEEDER_AUDIT_DETAILS(XElement xe) { return XTypedServices.ToXTypedElement<FEEDER_AUDIT_DETAILS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static FEEDER_AUDIT_DETAILS() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("system_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("location", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("provider", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("subject", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("time", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("version_id", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public FEEDER_AUDIT_DETAILS() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public string system_id {
			get {
				XElement x = this.GetElement(XName.Get("system_id", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("system_id", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public PARTY_IDENTIFIED location {
			get {
				XElement x = this.GetElement(XName.Get("location", "http://schemas.openehr.org/v1"));
				return ((PARTY_IDENTIFIED)(x));
			}
			set {
				this.SetElement(XName.Get("location", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public PARTY_IDENTIFIED provider {
			get {
				XElement x = this.GetElement(XName.Get("provider", "http://schemas.openehr.org/v1"));
				return ((PARTY_IDENTIFIED)(x));
			}
			set {
				this.SetElement(XName.Get("provider", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public PARTY_PROXY subject {
			get {
				XElement x = this.GetElement(XName.Get("subject", "http://schemas.openehr.org/v1"));
				return ((PARTY_PROXY)(x));
			}
			set {
				this.SetElement(XName.Get("subject", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public DV_DATE_TIME time {
			get {
				XElement x = this.GetElement(XName.Get("time", "http://schemas.openehr.org/v1"));
				return ((DV_DATE_TIME)(x));
			}
			set {
				this.SetElement(XName.Get("time", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (system_id, location?, provider?, subject?, time?, version_id?)
		/// </para>
		/// </summary>
		public string version_id {
			get {
				XElement x = this.GetElement(XName.Get("version_id", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("version_id", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("FEEDER_AUDIT_DETAILS", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<FEEDER_AUDIT_DETAILS>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("system_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("location", "http://schemas.openehr.org/v1"), typeof(PARTY_IDENTIFIED));
			localElementDictionary.Add(XName.Get("provider", "http://schemas.openehr.org/v1"), typeof(PARTY_IDENTIFIED));
			localElementDictionary.Add(XName.Get("subject", "http://schemas.openehr.org/v1"), typeof(PARTY_PROXY));
			localElementDictionary.Add(XName.Get("time", "http://schemas.openehr.org/v1"), typeof(DV_DATE_TIME));
			localElementDictionary.Add(XName.Get("version_id", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class Interval : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator Interval(XElement xe) {  return (Interval)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static Interval() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public Interval() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public System.Nullable<bool> lower_included {
			get {
				XElement x = this.GetElement(XName.Get("lower_included", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("lower_included", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public System.Nullable<bool> upper_included {
			get {
				XElement x = this.GetElement(XName.Get("upper_included", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("upper_included", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public bool lower_unbounded {
			get {
				XElement x = this.GetElement(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded)
		/// </para>
		/// </summary>
		public bool upper_unbounded {
			get {
				XElement x = this.GetElement(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("Interval", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class IntervalOfInteger : global::schemas.openehr.org.v1.Interval, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator IntervalOfInteger(XElement xe) { return XTypedServices.ToXTypedElement<IntervalOfInteger>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static IntervalOfInteger() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public IntervalOfInteger() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public System.Nullable<int> lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("lower", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public System.Nullable<int> upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("upper", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("IntervalOfInteger", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<IntervalOfInteger>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(int));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(int));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class IntervalOfReal : global::schemas.openehr.org.v1.Interval, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator IntervalOfReal(XElement xe) { return XTypedServices.ToXTypedElement<IntervalOfReal>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static IntervalOfReal() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public IntervalOfReal() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public System.Nullable<float> lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
			set {
				this.SetElement(XName.Get("lower", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public System.Nullable<float> upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
			set {
				this.SetElement(XName.Get("upper", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("IntervalOfReal", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<IntervalOfReal>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(float));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class IntervalOfDate : global::schemas.openehr.org.v1.Interval, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator IntervalOfDate(XElement xe) { return XTypedServices.ToXTypedElement<IntervalOfDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static IntervalOfDate() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public IntervalOfDate() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("lower", "http://schemas.openehr.org/v1"), value, "lower", global::schemas.openehr.org.v1.Iso8601Date.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("upper", "http://schemas.openehr.org/v1"), value, "upper", global::schemas.openehr.org.v1.Iso8601Date.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("IntervalOfDate", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<IntervalOfDate>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class IntervalOfDateTime : global::schemas.openehr.org.v1.Interval, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator IntervalOfDateTime(XElement xe) { return XTypedServices.ToXTypedElement<IntervalOfDateTime>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static IntervalOfDateTime() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public IntervalOfDateTime() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("lower", "http://schemas.openehr.org/v1"), value, "lower", global::schemas.openehr.org.v1.Iso8601DateTime.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("upper", "http://schemas.openehr.org/v1"), value, "upper", global::schemas.openehr.org.v1.Iso8601DateTime.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("IntervalOfDateTime", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<IntervalOfDateTime>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class IntervalOfTime : global::schemas.openehr.org.v1.Interval, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator IntervalOfTime(XElement xe) { return XTypedServices.ToXTypedElement<IntervalOfTime>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static IntervalOfTime() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public IntervalOfTime() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("lower", "http://schemas.openehr.org/v1"), value, "lower", global::schemas.openehr.org.v1.Iso8601Time.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("upper", "http://schemas.openehr.org/v1"), value, "upper", global::schemas.openehr.org.v1.Iso8601Time.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("IntervalOfTime", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<IntervalOfTime>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class IntervalOfDuration : global::schemas.openehr.org.v1.Interval, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator IntervalOfDuration(XElement xe) { return XTypedServices.ToXTypedElement<IntervalOfDuration>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static IntervalOfDuration() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lower_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_included", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lower", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("upper", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public IntervalOfDuration() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string lower {
			get {
				XElement x = this.GetElement(XName.Get("lower", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("lower", "http://schemas.openehr.org/v1"), value, "lower", global::schemas.openehr.org.v1.Iso8601Duration.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (lower_included?, upper_included?, lower_unbounded, upper_unbounded, lower?, upper?)
		/// </para>
		/// </summary>
		public string upper {
			get {
				XElement x = this.GetElement(XName.Get("upper", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("upper", "http://schemas.openehr.org/v1"), value, "upper", global::schemas.openehr.org.v1.Iso8601Duration.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("IntervalOfDuration", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<IntervalOfDuration>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("lower_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_included", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("upper_unbounded", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("lower", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("upper", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class AUTHORED_RESOURCE : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<TRANSLATION_DETAILS> translationsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator AUTHORED_RESOURCE(XElement xe) {  return (AUTHORED_RESOURCE)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static AUTHORED_RESOURCE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("original_language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("is_controlled", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("description", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("translations", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("revision_history", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
		/// </para>
		/// </summary>
		public AUTHORED_RESOURCE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
		/// </para>
		/// </summary>
		public CODE_PHRASE original_language {
			get {
				XElement x = this.GetElement(XName.Get("original_language", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("original_language", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
		/// </para>
		/// </summary>
		public System.Nullable<bool> is_controlled {
			get {
				XElement x = this.GetElement(XName.Get("is_controlled", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("is_controlled", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
		/// </para>
		/// </summary>
		public RESOURCE_DESCRIPTION description {
			get {
				XElement x = this.GetElement(XName.Get("description", "http://schemas.openehr.org/v1"));
				return ((RESOURCE_DESCRIPTION)(x));
			}
			set {
				this.SetElement(XName.Get("description", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
		/// </para>
		/// </summary>
		public IList<TRANSLATION_DETAILS> translations {
			get {
				if ((this.translationsField == null)) {
					this.translationsField = new XTypedList<TRANSLATION_DETAILS>(this, LinqToXsdTypeManager.Instance, XName.Get("translations", "http://schemas.openehr.org/v1"));
				}
				return this.translationsField;
			}
			set {
				if ((value == null)) {
					this.translationsField = null;
				}
				else {
					if ((this.translationsField == null)) {
						this.translationsField = XTypedList<TRANSLATION_DETAILS>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("translations", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<TRANSLATION_DETAILS>(this.translationsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?)
		/// </para>
		/// </summary>
		public REVISION_HISTORY revision_history {
			get {
				XElement x = this.GetElement(XName.Get("revision_history", "http://schemas.openehr.org/v1"));
				return ((REVISION_HISTORY)(x));
			}
			set {
				this.SetElement(XName.Get("revision_history", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("AUTHORED_RESOURCE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("original_language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("is_controlled", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("description", "http://schemas.openehr.org/v1"), typeof(RESOURCE_DESCRIPTION));
			localElementDictionary.Add(XName.Get("translations", "http://schemas.openehr.org/v1"), typeof(TRANSLATION_DETAILS));
			localElementDictionary.Add(XName.Get("revision_history", "http://schemas.openehr.org/v1"), typeof(REVISION_HISTORY));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (language, author+, accreditation?, other_details*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TRANSLATION_DETAILS : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> authorField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> other_detailsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TRANSLATION_DETAILS(XElement xe) { return XTypedServices.ToXTypedElement<TRANSLATION_DETAILS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TRANSLATION_DETAILS() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("author", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("accreditation", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_details", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (language, author+, accreditation?, other_details*)
		/// </para>
		/// </summary>
		public TRANSLATION_DETAILS() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (language, author+, accreditation?, other_details*)
		/// </para>
		/// </summary>
		public CODE_PHRASE language {
			get {
				XElement x = this.GetElement(XName.Get("language", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("language", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (language, author+, accreditation?, other_details*)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> author {
			get {
				if ((this.authorField == null)) {
					this.authorField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("author", "http://schemas.openehr.org/v1"));
				}
				return this.authorField;
			}
			set {
				if ((value == null)) {
					this.authorField = null;
				}
				else {
					if ((this.authorField == null)) {
						this.authorField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("author", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.authorField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (language, author+, accreditation?, other_details*)
		/// </para>
		/// </summary>
		public string accreditation {
			get {
				XElement x = this.GetElement(XName.Get("accreditation", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("accreditation", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (language, author+, accreditation?, other_details*)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> other_details {
			get {
				if ((this.other_detailsField == null)) {
					this.other_detailsField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("other_details", "http://schemas.openehr.org/v1"));
				}
				return this.other_detailsField;
			}
			set {
				if ((value == null)) {
					this.other_detailsField = null;
				}
				else {
					if ((this.other_detailsField == null)) {
						this.other_detailsField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("other_details", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.other_detailsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TRANSLATION_DETAILS", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TRANSLATION_DETAILS>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("author", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
			localElementDictionary.Add(XName.Get("accreditation", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("other_details", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class RESOURCE_DESCRIPTION : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> original_authorField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XSimpleList<string> other_contributorsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> other_detailsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<RESOURCE_DESCRIPTION_ITEM> detailsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator RESOURCE_DESCRIPTION(XElement xe) { return XTypedServices.ToXTypedElement<RESOURCE_DESCRIPTION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static RESOURCE_DESCRIPTION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("original_author", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_contributors", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("lifecycle_state", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("resource_package_uri", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_details", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("details", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("parent_resource", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public RESOURCE_DESCRIPTION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> original_author {
			get {
				if ((this.original_authorField == null)) {
					this.original_authorField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("original_author", "http://schemas.openehr.org/v1"));
				}
				return this.original_authorField;
			}
			set {
				if ((value == null)) {
					this.original_authorField = null;
				}
				else {
					if ((this.original_authorField == null)) {
						this.original_authorField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("original_author", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.original_authorField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public IList<string> other_contributors {
			get {
				if ((this.other_contributorsField == null)) {
					this.other_contributorsField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("other_contributors", "http://schemas.openehr.org/v1"));
				}
				return this.other_contributorsField;
			}
			set {
				if ((value == null)) {
					this.other_contributorsField = null;
				}
				else {
					if ((this.other_contributorsField == null)) {
						this.other_contributorsField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("other_contributors", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<System.String>(this.other_contributorsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public string lifecycle_state {
			get {
				XElement x = this.GetElement(XName.Get("lifecycle_state", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("lifecycle_state", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public string resource_package_uri {
			get {
				XElement x = this.GetElement(XName.Get("resource_package_uri", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("resource_package_uri", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> other_details {
			get {
				if ((this.other_detailsField == null)) {
					this.other_detailsField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("other_details", "http://schemas.openehr.org/v1"));
				}
				return this.other_detailsField;
			}
			set {
				if ((value == null)) {
					this.other_detailsField = null;
				}
				else {
					if ((this.other_detailsField == null)) {
						this.other_detailsField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("other_details", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.other_detailsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public IList<RESOURCE_DESCRIPTION_ITEM> details {
			get {
				if ((this.detailsField == null)) {
					this.detailsField = new XTypedList<RESOURCE_DESCRIPTION_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("details", "http://schemas.openehr.org/v1"));
				}
				return this.detailsField;
			}
			set {
				if ((value == null)) {
					this.detailsField = null;
				}
				else {
					if ((this.detailsField == null)) {
						this.detailsField = XTypedList<RESOURCE_DESCRIPTION_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("details", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<RESOURCE_DESCRIPTION_ITEM>(this.detailsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_author+, other_contributors*, lifecycle_state, resource_package_uri?, other_details*, details+, parent_resource?)
		/// </para>
		/// </summary>
		public AUTHORED_RESOURCE parent_resource {
			get {
				XElement x = this.GetElement(XName.Get("parent_resource", "http://schemas.openehr.org/v1"));
				return ((AUTHORED_RESOURCE)(x));
			}
			set {
				this.SetElement(XName.Get("parent_resource", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("RESOURCE_DESCRIPTION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<RESOURCE_DESCRIPTION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("original_author", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
			localElementDictionary.Add(XName.Get("other_contributors", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("lifecycle_state", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("resource_package_uri", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("other_details", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
			localElementDictionary.Add(XName.Get("details", "http://schemas.openehr.org/v1"), typeof(RESOURCE_DESCRIPTION_ITEM));
			localElementDictionary.Add(XName.Get("parent_resource", "http://schemas.openehr.org/v1"), typeof(AUTHORED_RESOURCE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class RESOURCE_DESCRIPTION_ITEM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XSimpleList<string> keywordsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> original_resource_uriField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> other_detailsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator RESOURCE_DESCRIPTION_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<RESOURCE_DESCRIPTION_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static RESOURCE_DESCRIPTION_ITEM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("purpose", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("keywords", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("use", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("misuse", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("copyright", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("original_resource_uri", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("other_details", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public RESOURCE_DESCRIPTION_ITEM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public CODE_PHRASE language {
			get {
				XElement x = this.GetElement(XName.Get("language", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("language", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public string purpose {
			get {
				XElement x = this.GetElement(XName.Get("purpose", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("purpose", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public IList<string> keywords {
			get {
				if ((this.keywordsField == null)) {
					this.keywordsField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("keywords", "http://schemas.openehr.org/v1"));
				}
				return this.keywordsField;
			}
			set {
				if ((value == null)) {
					this.keywordsField = null;
				}
				else {
					if ((this.keywordsField == null)) {
						this.keywordsField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("keywords", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<System.String>(this.keywordsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public string use {
			get {
				XElement x = this.GetElement(XName.Get("use", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("use", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public string misuse {
			get {
				XElement x = this.GetElement(XName.Get("misuse", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("misuse", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public string copyright {
			get {
				XElement x = this.GetElement(XName.Get("copyright", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("copyright", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> original_resource_uri {
			get {
				if ((this.original_resource_uriField == null)) {
					this.original_resource_uriField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("original_resource_uri", "http://schemas.openehr.org/v1"));
				}
				return this.original_resource_uriField;
			}
			set {
				if ((value == null)) {
					this.original_resource_uriField = null;
				}
				else {
					if ((this.original_resource_uriField == null)) {
						this.original_resource_uriField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("original_resource_uri", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.original_resource_uriField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (language, purpose, keywords*, use?, misuse?, copyright?, original_resource_uri*, other_details*)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> other_details {
			get {
				if ((this.other_detailsField == null)) {
					this.other_detailsField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("other_details", "http://schemas.openehr.org/v1"));
				}
				return this.other_detailsField;
			}
			set {
				if ((value == null)) {
					this.other_detailsField = null;
				}
				else {
					if ((this.other_detailsField == null)) {
						this.other_detailsField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("other_details", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.other_detailsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("RESOURCE_DESCRIPTION_ITEM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<RESOURCE_DESCRIPTION_ITEM>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("purpose", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("keywords", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("use", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("misuse", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("copyright", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("original_resource_uri", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
			localElementDictionary.Add(XName.Get("other_details", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class StringDictionaryItem : XTypedElement, IXMetaData
	{
		
		 public static explicit operator StringDictionaryItem(XElement xe) { return XTypedServices.ToXTypedElement<StringDictionaryItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public StringDictionaryItem() {
		}
		
		public string TypedValue {
			get {
				XElement x = this.Untyped;
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string id {
			get {
				XAttribute x = this.Attribute(XName.Get("id", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("StringDictionaryItem", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<StringDictionaryItem>(this);
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ARCHETYPEType : global::schemas.openehr.org.v1.AUTHORED_RESOURCE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<ASSERTION> invariantsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ARCHETYPEType(XElement xe) { return XTypedServices.ToXTypedElement<ARCHETYPEType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ARCHETYPEType() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("original_language", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("is_controlled", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("description", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("translations", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("revision_history", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("uid", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("archetype_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("adl_version", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("concept", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("parent_archetype_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("definition", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("invariants", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("ontology", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPEType() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public HIER_OBJECT_ID uid {
			get {
				XElement x = this.GetElement(XName.Get("uid", "http://schemas.openehr.org/v1"));
				return ((HIER_OBJECT_ID)(x));
			}
			set {
				this.SetElement(XName.Get("uid", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPE_ID archetype_id {
			get {
				XElement x = this.GetElement(XName.Get("archetype_id", "http://schemas.openehr.org/v1"));
				return ((ARCHETYPE_ID)(x));
			}
			set {
				this.SetElement(XName.Get("archetype_id", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public string adl_version {
			get {
				XElement x = this.GetElement(XName.Get("adl_version", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("adl_version", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public string concept {
			get {
				XElement x = this.GetElement(XName.Get("concept", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("concept", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPE_ID parent_archetype_id {
			get {
				XElement x = this.GetElement(XName.Get("parent_archetype_id", "http://schemas.openehr.org/v1"));
				return ((ARCHETYPE_ID)(x));
			}
			set {
				this.SetElement(XName.Get("parent_archetype_id", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public C_COMPLEX_OBJECT definition {
			get {
				XElement x = this.GetElement(XName.Get("definition", "http://schemas.openehr.org/v1"));
				return ((C_COMPLEX_OBJECT)(x));
			}
			set {
				this.SetElement(XName.Get("definition", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public IList<ASSERTION> invariants {
			get {
				if ((this.invariantsField == null)) {
					this.invariantsField = new XTypedList<ASSERTION>(this, LinqToXsdTypeManager.Instance, XName.Get("invariants", "http://schemas.openehr.org/v1"));
				}
				return this.invariantsField;
			}
			set {
				if ((value == null)) {
					this.invariantsField = null;
				}
				else {
					if ((this.invariantsField == null)) {
						this.invariantsField = XTypedList<ASSERTION>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("invariants", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<ASSERTION>(this.invariantsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPE_ONTOLOGY ontology {
			get {
				XElement x = this.GetElement(XName.Get("ontology", "http://schemas.openehr.org/v1"));
				return ((ARCHETYPE_ONTOLOGY)(x));
			}
			set {
				this.SetElement(XName.Get("ontology", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ARCHETYPEType>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("original_language", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("is_controlled", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("description", "http://schemas.openehr.org/v1"), typeof(RESOURCE_DESCRIPTION));
			localElementDictionary.Add(XName.Get("translations", "http://schemas.openehr.org/v1"), typeof(TRANSLATION_DETAILS));
			localElementDictionary.Add(XName.Get("revision_history", "http://schemas.openehr.org/v1"), typeof(REVISION_HISTORY));
			localElementDictionary.Add(XName.Get("uid", "http://schemas.openehr.org/v1"), typeof(HIER_OBJECT_ID));
			localElementDictionary.Add(XName.Get("archetype_id", "http://schemas.openehr.org/v1"), typeof(ARCHETYPE_ID));
			localElementDictionary.Add(XName.Get("adl_version", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("concept", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("parent_archetype_id", "http://schemas.openehr.org/v1"), typeof(ARCHETYPE_ID));
			localElementDictionary.Add(XName.Get("definition", "http://schemas.openehr.org/v1"), typeof(C_COMPLEX_OBJECT));
			localElementDictionary.Add(XName.Get("invariants", "http://schemas.openehr.org/v1"), typeof(ASSERTION));
			localElementDictionary.Add(XName.Get("ontology", "http://schemas.openehr.org/v1"), typeof(ARCHETYPE_ONTOLOGY));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class ARCHETYPE_CONSTRAINT : XTypedElement, IXMetaData
	{
		
		 public static explicit operator ARCHETYPE_CONSTRAINT(XElement xe) {  return (ARCHETYPE_CONSTRAINT)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public ARCHETYPE_CONSTRAINT() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE_CONSTRAINT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class C_OBJECT : global::schemas.openehr.org.v1.ARCHETYPE_CONSTRAINT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_OBJECT(XElement xe) {  return (C_OBJECT)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_OBJECT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id)
		/// </para>
		/// </summary>
		public C_OBJECT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id)
		/// </para>
		/// </summary>
		public string rm_type_name {
			get {
				XElement x = this.GetElement(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id)
		/// </para>
		/// </summary>
		public IntervalOfInteger occurrences {
			get {
				XElement x = this.GetElement(XName.Get("occurrences", "http://schemas.openehr.org/v1"));
				return ((IntervalOfInteger)(x));
			}
			set {
				this.SetElement(XName.Get("occurrences", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id)
		/// </para>
		/// </summary>
		public string node_id {
			get {
				XElement x = this.GetElement(XName.Get("node_id", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("node_id", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_OBJECT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_attribute_name, existence, children*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class C_ATTRIBUTE : global::schemas.openehr.org.v1.ARCHETYPE_CONSTRAINT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<C_OBJECT> childrenField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_ATTRIBUTE(XElement xe) {  return (C_ATTRIBUTE)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_ATTRIBUTE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("existence", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("children", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*)
		/// </para>
		/// </summary>
		public C_ATTRIBUTE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*)
		/// </para>
		/// </summary>
		public string rm_attribute_name {
			get {
				XElement x = this.GetElement(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*)
		/// </para>
		/// </summary>
		public IntervalOfInteger existence {
			get {
				XElement x = this.GetElement(XName.Get("existence", "http://schemas.openehr.org/v1"));
				return ((IntervalOfInteger)(x));
			}
			set {
				this.SetElement(XName.Get("existence", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*)
		/// </para>
		/// </summary>
		public IList<C_OBJECT> children {
			get {
				if ((this.childrenField == null)) {
					this.childrenField = new XTypedList<C_OBJECT>(this, LinqToXsdTypeManager.Instance, XName.Get("children", "http://schemas.openehr.org/v1"));
				}
				return this.childrenField;
			}
			set {
				if ((value == null)) {
					this.childrenField = null;
				}
				else {
					if ((this.childrenField == null)) {
						this.childrenField = XTypedList<C_OBJECT>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("children", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<C_OBJECT>(this.childrenField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_ATTRIBUTE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("existence", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("children", "http://schemas.openehr.org/v1"), typeof(C_OBJECT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_attribute_name, existence, children*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_SINGLE_ATTRIBUTE : global::schemas.openehr.org.v1.C_ATTRIBUTE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_SINGLE_ATTRIBUTE(XElement xe) { return XTypedServices.ToXTypedElement<C_SINGLE_ATTRIBUTE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_SINGLE_ATTRIBUTE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("existence", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("children", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*)
		/// </para>
		/// </summary>
		public C_SINGLE_ATTRIBUTE() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_SINGLE_ATTRIBUTE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_SINGLE_ATTRIBUTE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("existence", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("children", "http://schemas.openehr.org/v1"), typeof(C_OBJECT));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_attribute_name, existence, children*, cardinality)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_MULTIPLE_ATTRIBUTE : global::schemas.openehr.org.v1.C_ATTRIBUTE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_MULTIPLE_ATTRIBUTE(XElement xe) { return XTypedServices.ToXTypedElement<C_MULTIPLE_ATTRIBUTE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_MULTIPLE_ATTRIBUTE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("existence", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("children", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("cardinality", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*, cardinality)
		/// </para>
		/// </summary>
		public C_MULTIPLE_ATTRIBUTE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_attribute_name, existence, children*, cardinality)
		/// </para>
		/// </summary>
		public CARDINALITY cardinality {
			get {
				XElement x = this.GetElement(XName.Get("cardinality", "http://schemas.openehr.org/v1"));
				return ((CARDINALITY)(x));
			}
			set {
				this.SetElement(XName.Get("cardinality", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_MULTIPLE_ATTRIBUTE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_MULTIPLE_ATTRIBUTE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_attribute_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("existence", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("children", "http://schemas.openehr.org/v1"), typeof(C_OBJECT));
			localElementDictionary.Add(XName.Get("cardinality", "http://schemas.openehr.org/v1"), typeof(CARDINALITY));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (is_ordered, is_unique, interval)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class CARDINALITY : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator CARDINALITY(XElement xe) { return XTypedServices.ToXTypedElement<CARDINALITY>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static CARDINALITY() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("is_ordered", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("is_unique", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("interval", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (is_ordered, is_unique, interval)
		/// </para>
		/// </summary>
		public CARDINALITY() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (is_ordered, is_unique, interval)
		/// </para>
		/// </summary>
		public bool is_ordered {
			get {
				XElement x = this.GetElement(XName.Get("is_ordered", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("is_ordered", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (is_ordered, is_unique, interval)
		/// </para>
		/// </summary>
		public bool is_unique {
			get {
				XElement x = this.GetElement(XName.Get("is_unique", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("is_unique", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (is_ordered, is_unique, interval)
		/// </para>
		/// </summary>
		public IntervalOfInteger interval {
			get {
				XElement x = this.GetElement(XName.Get("interval", "http://schemas.openehr.org/v1"));
				return ((IntervalOfInteger)(x));
			}
			set {
				this.SetElement(XName.Get("interval", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("CARDINALITY", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<CARDINALITY>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("is_ordered", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("is_unique", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("interval", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, attributes*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_COMPLEX_OBJECT : global::schemas.openehr.org.v1.C_DEFINED_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<C_ATTRIBUTE> attributesField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_COMPLEX_OBJECT(XElement xe) { return XTypedServices.ToXTypedElement<C_COMPLEX_OBJECT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_COMPLEX_OBJECT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("attributes", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, attributes*)
		/// </para>
		/// </summary>
		public C_COMPLEX_OBJECT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, attributes*)
		/// </para>
		/// </summary>
		public IList<C_ATTRIBUTE> attributes {
			get {
				if ((this.attributesField == null)) {
					this.attributesField = new XTypedList<C_ATTRIBUTE>(this, LinqToXsdTypeManager.Instance, XName.Get("attributes", "http://schemas.openehr.org/v1"));
				}
				return this.attributesField;
			}
			set {
				if ((value == null)) {
					this.attributesField = null;
				}
				else {
					if ((this.attributesField == null)) {
						this.attributesField = XTypedList<C_ATTRIBUTE>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("attributes", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<C_ATTRIBUTE>(this.attributesField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_COMPLEX_OBJECT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_COMPLEX_OBJECT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("attributes", "http://schemas.openehr.org/v1"), typeof(C_ATTRIBUTE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, includes*, excludes*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ARCHETYPE_SLOT : global::schemas.openehr.org.v1.C_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<ASSERTION> includesField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<ASSERTION> excludesField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ARCHETYPE_SLOT(XElement xe) { return XTypedServices.ToXTypedElement<ARCHETYPE_SLOT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ARCHETYPE_SLOT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("includes", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("excludes", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, includes*, excludes*)
		/// </para>
		/// </summary>
		public ARCHETYPE_SLOT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, includes*, excludes*)
		/// </para>
		/// </summary>
		public IList<ASSERTION> includes {
			get {
				if ((this.includesField == null)) {
					this.includesField = new XTypedList<ASSERTION>(this, LinqToXsdTypeManager.Instance, XName.Get("includes", "http://schemas.openehr.org/v1"));
				}
				return this.includesField;
			}
			set {
				if ((value == null)) {
					this.includesField = null;
				}
				else {
					if ((this.includesField == null)) {
						this.includesField = XTypedList<ASSERTION>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("includes", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<ASSERTION>(this.includesField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, includes*, excludes*)
		/// </para>
		/// </summary>
		public IList<ASSERTION> excludes {
			get {
				if ((this.excludesField == null)) {
					this.excludesField = new XTypedList<ASSERTION>(this, LinqToXsdTypeManager.Instance, XName.Get("excludes", "http://schemas.openehr.org/v1"));
				}
				return this.excludesField;
			}
			set {
				if ((value == null)) {
					this.excludesField = null;
				}
				else {
					if ((this.excludesField == null)) {
						this.excludesField = XTypedList<ASSERTION>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("excludes", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<ASSERTION>(this.excludesField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE_SLOT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ARCHETYPE_SLOT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("includes", "http://schemas.openehr.org/v1"), typeof(ASSERTION));
			localElementDictionary.Add(XName.Get("excludes", "http://schemas.openehr.org/v1"), typeof(ASSERTION));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, reference)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class CONSTRAINT_REF : global::schemas.openehr.org.v1.C_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator CONSTRAINT_REF(XElement xe) { return XTypedServices.ToXTypedElement<CONSTRAINT_REF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static CONSTRAINT_REF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("reference", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, reference)
		/// </para>
		/// </summary>
		public CONSTRAINT_REF() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, reference)
		/// </para>
		/// </summary>
		public string reference {
			get {
				XElement x = this.GetElement(XName.Get("reference", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("reference", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("CONSTRAINT_REF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<CONSTRAINT_REF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("reference", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DEFINED_OBJECT : global::schemas.openehr.org.v1.C_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DEFINED_OBJECT(XElement xe) { return XTypedServices.ToXTypedElement<C_DEFINED_OBJECT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DEFINED_OBJECT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed)
		/// </para>
		/// </summary>
		public C_DEFINED_OBJECT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed)
		/// </para>
		/// </summary>
		public bool any_allowed {
			get {
				XElement x = this.GetElement(XName.Get("any_allowed", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DEFINED_OBJECT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DEFINED_OBJECT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, item?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_PRIMITIVE_OBJECT : global::schemas.openehr.org.v1.C_DEFINED_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_PRIMITIVE_OBJECT(XElement xe) { return XTypedServices.ToXTypedElement<C_PRIMITIVE_OBJECT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_PRIMITIVE_OBJECT() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("item", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, item?)
		/// </para>
		/// </summary>
		public C_PRIMITIVE_OBJECT() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, item?)
		/// </para>
		/// </summary>
		public C_PRIMITIVE item {
			get {
				XElement x = this.GetElement(XName.Get("item", "http://schemas.openehr.org/v1"));
				return ((C_PRIMITIVE)(x));
			}
			set {
				this.SetElement(XName.Get("item", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_PRIMITIVE_OBJECT", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_PRIMITIVE_OBJECT>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("item", "http://schemas.openehr.org/v1"), typeof(C_PRIMITIVE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class C_DOMAIN_TYPE : global::schemas.openehr.org.v1.C_DEFINED_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DOMAIN_TYPE(XElement xe) {  return (C_DOMAIN_TYPE)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DOMAIN_TYPE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed)
		/// </para>
		/// </summary>
		public C_DOMAIN_TYPE() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DOMAIN_TYPE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, target_path)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ARCHETYPE_INTERNAL_REF : global::schemas.openehr.org.v1.C_OBJECT, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ARCHETYPE_INTERNAL_REF(XElement xe) { return XTypedServices.ToXTypedElement<ARCHETYPE_INTERNAL_REF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ARCHETYPE_INTERNAL_REF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("target_path", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, target_path)
		/// </para>
		/// </summary>
		public ARCHETYPE_INTERNAL_REF() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, target_path)
		/// </para>
		/// </summary>
		public string target_path {
			get {
				XElement x = this.GetElement(XName.Get("target_path", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("target_path", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE_INTERNAL_REF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ARCHETYPE_INTERNAL_REF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("target_path", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (tag?, string_expression?, expression, variables*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ASSERTION : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<ASSERTION_VARIABLE> variablesField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ASSERTION(XElement xe) { return XTypedServices.ToXTypedElement<ASSERTION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ASSERTION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("tag", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("string_expression", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("expression", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("variables", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (tag?, string_expression?, expression, variables*)
		/// </para>
		/// </summary>
		public ASSERTION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (tag?, string_expression?, expression, variables*)
		/// </para>
		/// </summary>
		public string tag {
			get {
				XElement x = this.GetElement(XName.Get("tag", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("tag", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (tag?, string_expression?, expression, variables*)
		/// </para>
		/// </summary>
		public string string_expression {
			get {
				XElement x = this.GetElement(XName.Get("string_expression", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("string_expression", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (tag?, string_expression?, expression, variables*)
		/// </para>
		/// </summary>
		public EXPR_ITEM expression {
			get {
				XElement x = this.GetElement(XName.Get("expression", "http://schemas.openehr.org/v1"));
				return ((EXPR_ITEM)(x));
			}
			set {
				this.SetElement(XName.Get("expression", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (tag?, string_expression?, expression, variables*)
		/// </para>
		/// </summary>
		public IList<ASSERTION_VARIABLE> variables {
			get {
				if ((this.variablesField == null)) {
					this.variablesField = new XTypedList<ASSERTION_VARIABLE>(this, LinqToXsdTypeManager.Instance, XName.Get("variables", "http://schemas.openehr.org/v1"));
				}
				return this.variablesField;
			}
			set {
				if ((value == null)) {
					this.variablesField = null;
				}
				else {
					if ((this.variablesField == null)) {
						this.variablesField = XTypedList<ASSERTION_VARIABLE>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("variables", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<ASSERTION_VARIABLE>(this.variablesField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ASSERTION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ASSERTION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("tag", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("string_expression", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("expression", "http://schemas.openehr.org/v1"), typeof(EXPR_ITEM));
			localElementDictionary.Add(XName.Get("variables", "http://schemas.openehr.org/v1"), typeof(ASSERTION_VARIABLE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (type)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class EXPR_ITEM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator EXPR_ITEM(XElement xe) {  return (EXPR_ITEM)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static EXPR_ITEM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (type)
		/// </para>
		/// </summary>
		public EXPR_ITEM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type)
		/// </para>
		/// </summary>
		public string type {
			get {
				XElement x = this.GetElement(XName.Get("type", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("type", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("EXPR_ITEM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (name, definition)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ASSERTION_VARIABLE : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ASSERTION_VARIABLE(XElement xe) { return XTypedServices.ToXTypedElement<ASSERTION_VARIABLE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ASSERTION_VARIABLE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("definition", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (name, definition)
		/// </para>
		/// </summary>
		public ASSERTION_VARIABLE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (name, definition)
		/// </para>
		/// </summary>
		public string name {
			get {
				XElement x = this.GetElement(XName.Get("name", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("name", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (name, definition)
		/// </para>
		/// </summary>
		public string definition {
			get {
				XElement x = this.GetElement(XName.Get("definition", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("definition", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ASSERTION_VARIABLE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ASSERTION_VARIABLE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("definition", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (type, item, reference_type)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class EXPR_LEAF : global::schemas.openehr.org.v1.EXPR_ITEM, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator EXPR_LEAF(XElement xe) { return XTypedServices.ToXTypedElement<EXPR_LEAF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static EXPR_LEAF() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("item", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("reference_type", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (type, item, reference_type)
		/// </para>
		/// </summary>
		public EXPR_LEAF() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, item, reference_type)
		/// </para>
		/// </summary>
		public XTypedElement item {
			get {
				XElement x = this.GetElement(XName.Get("item", "http://schemas.openehr.org/v1"));
				return ((XTypedElement)(x));
			}
			set {
				this.SetElement(XName.Get("item", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, item, reference_type)
		/// </para>
		/// </summary>
		public string reference_type {
			get {
				XElement x = this.GetElement(XName.Get("reference_type", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("reference_type", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("EXPR_LEAF", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<EXPR_LEAF>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("item", "http://schemas.openehr.org/v1"), typeof(XTypedElement));
			localElementDictionary.Add(XName.Get("reference_type", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (type, @operator, precedence_overridden)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class EXPR_OPERATOR : global::schemas.openehr.org.v1.EXPR_ITEM, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator EXPR_OPERATOR(XElement xe) {  return (EXPR_OPERATOR)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static EXPR_OPERATOR() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("operator", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden)
		/// </para>
		/// </summary>
		public EXPR_OPERATOR() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden)
		/// </para>
		/// </summary>
		public decimal @operator {
			get {
				XElement x = this.GetElement(XName.Get("operator", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("operator", "http://schemas.openehr.org/v1"), value, "@operator", global::schemas.openehr.org.v1.OPERATOR_KIND.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden)
		/// </para>
		/// </summary>
		public bool precedence_overridden {
			get {
				XElement x = this.GetElement(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("EXPR_OPERATOR", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("operator", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (type, @operator, precedence_overridden, operand)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class EXPR_UNARY_OPERATOR : global::schemas.openehr.org.v1.EXPR_OPERATOR, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator EXPR_UNARY_OPERATOR(XElement xe) { return XTypedServices.ToXTypedElement<EXPR_UNARY_OPERATOR>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static EXPR_UNARY_OPERATOR() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("operator", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("operand", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden, operand)
		/// </para>
		/// </summary>
		public EXPR_UNARY_OPERATOR() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden, operand)
		/// </para>
		/// </summary>
		public EXPR_ITEM operand {
			get {
				XElement x = this.GetElement(XName.Get("operand", "http://schemas.openehr.org/v1"));
				return ((EXPR_ITEM)(x));
			}
			set {
				this.SetElement(XName.Get("operand", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("EXPR_UNARY_OPERATOR", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<EXPR_UNARY_OPERATOR>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("operator", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("operand", "http://schemas.openehr.org/v1"), typeof(EXPR_ITEM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (type, @operator, precedence_overridden, left_operand, right_operand)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class EXPR_BINARY_OPERATOR : global::schemas.openehr.org.v1.EXPR_OPERATOR, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator EXPR_BINARY_OPERATOR(XElement xe) { return XTypedServices.ToXTypedElement<EXPR_BINARY_OPERATOR>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static EXPR_BINARY_OPERATOR() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("operator", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("left_operand", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("right_operand", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden, left_operand, right_operand)
		/// </para>
		/// </summary>
		public EXPR_BINARY_OPERATOR() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden, left_operand, right_operand)
		/// </para>
		/// </summary>
		public EXPR_ITEM left_operand {
			get {
				XElement x = this.GetElement(XName.Get("left_operand", "http://schemas.openehr.org/v1"));
				return ((EXPR_ITEM)(x));
			}
			set {
				this.SetElement(XName.Get("left_operand", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (type, @operator, precedence_overridden, left_operand, right_operand)
		/// </para>
		/// </summary>
		public EXPR_ITEM right_operand {
			get {
				XElement x = this.GetElement(XName.Get("right_operand", "http://schemas.openehr.org/v1"));
				return ((EXPR_ITEM)(x));
			}
			set {
				this.SetElement(XName.Get("right_operand", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("EXPR_BINARY_OPERATOR", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<EXPR_BINARY_OPERATOR>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("type", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("operator", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("precedence_overridden", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("left_operand", "http://schemas.openehr.org/v1"), typeof(EXPR_ITEM));
			localElementDictionary.Add(XName.Get("right_operand", "http://schemas.openehr.org/v1"), typeof(EXPR_ITEM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class OPERATOR_KIND
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
						2001m,
						2002m,
						2003m,
						2004m,
						2005m,
						2006m,
						2007m,
						2010m,
						2011m,
						2012m,
						2013m,
						2014m,
						2015m,
						2016m,
						2020m,
						2021m,
						2022m,
						2023m,
						2024m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
		
		private OPERATOR_KIND() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class VALIDITY_KIND
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
						1001m,
						1002m,
						1003m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
		
		private VALIDITY_KIND() {
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class C_PRIMITIVE : XTypedElement, IXMetaData
	{
		
		 public static explicit operator C_PRIMITIVE(XElement xe) {  return (C_PRIMITIVE)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public C_PRIMITIVE() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_PRIMITIVE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (true_valid, false_valid, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_BOOLEAN : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_BOOLEAN(XElement xe) { return XTypedServices.ToXTypedElement<C_BOOLEAN>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_BOOLEAN() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("true_valid", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("false_valid", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (true_valid, false_valid, assumed_value?)
		/// </para>
		/// </summary>
		public C_BOOLEAN() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (true_valid, false_valid, assumed_value?)
		/// </para>
		/// </summary>
		public bool true_valid {
			get {
				XElement x = this.GetElement(XName.Get("true_valid", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("true_valid", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (true_valid, false_valid, assumed_value?)
		/// </para>
		/// </summary>
		public bool false_valid {
			get {
				XElement x = this.GetElement(XName.Get("false_valid", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("false_valid", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (true_valid, false_valid, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<bool> assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_BOOLEAN", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_BOOLEAN>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("true_valid", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("false_valid", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(bool));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (pattern?, list*, list_open?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_STRING : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XSimpleList<string> listField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_STRING(XElement xe) { return XTypedServices.ToXTypedElement<C_STRING>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_STRING() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pattern", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("list", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("list_open", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (pattern?, list*, list_open?, assumed_value?)
		/// </para>
		/// </summary>
		public C_STRING() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, list*, list_open?, assumed_value?)
		/// </para>
		/// </summary>
		public string pattern {
			get {
				XElement x = this.GetElement(XName.Get("pattern", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("pattern", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, list*, list_open?, assumed_value?)
		/// </para>
		/// </summary>
		public IList<string> list {
			get {
				if ((this.listField == null)) {
					this.listField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("list", "http://schemas.openehr.org/v1"));
				}
				return this.listField;
			}
			set {
				if ((value == null)) {
					this.listField = null;
				}
				else {
					if ((this.listField == null)) {
						this.listField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("list", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<System.String>(this.listField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, list*, list_open?, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<bool> list_open {
			get {
				XElement x = this.GetElement(XName.Get("list_open", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetElement(XName.Get("list_open", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, list*, list_open?, assumed_value?)
		/// </para>
		/// </summary>
		public string assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_STRING", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_STRING>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("pattern", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("list", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("list_open", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (list*, range?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_INTEGER : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XSimpleList<int> listField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_INTEGER(XElement xe) { return XTypedServices.ToXTypedElement<C_INTEGER>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_INTEGER() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("list", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public C_INTEGER() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IList<int> list {
			get {
				if ((this.listField == null)) {
					this.listField = new XSimpleList<int>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, XName.Get("list", "http://schemas.openehr.org/v1"));
				}
				return this.listField;
			}
			set {
				if ((value == null)) {
					this.listField = null;
				}
				else {
					if ((this.listField == null)) {
						this.listField = XSimpleList<int>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, value, XName.Get("list", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<System.Int32>(this.listField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IntervalOfInteger range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((IntervalOfInteger)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<int> assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_INTEGER", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_INTEGER>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("list", "http://schemas.openehr.org/v1"), typeof(int));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(int));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (list*, range?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_REAL : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XSimpleList<float> listField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_REAL(XElement xe) { return XTypedServices.ToXTypedElement<C_REAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_REAL() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("list", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public C_REAL() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IList<float> list {
			get {
				if ((this.listField == null)) {
					this.listField = new XSimpleList<float>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype, XName.Get("list", "http://schemas.openehr.org/v1"));
				}
				return this.listField;
			}
			set {
				if ((value == null)) {
					this.listField = null;
				}
				else {
					if ((this.listField == null)) {
						this.listField = XSimpleList<float>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype, value, XName.Get("list", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<System.Single>(this.listField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IntervalOfReal range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((IntervalOfReal)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (list*, range?, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<float> assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_REAL", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_REAL>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("list", "http://schemas.openehr.org/v1"), typeof(float));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(IntervalOfReal));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(float));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DATE : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DATE(XElement xe) { return XTypedServices.ToXTypedElement<C_DATE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pattern", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("timezone_validity", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public C_DATE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string pattern {
			get {
				XElement x = this.GetElement(XName.Get("pattern", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("pattern", "http://schemas.openehr.org/v1"), value, "pattern", global::schemas.openehr.org.v1.DateConstraintPattern.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<decimal> timezone_validity {
			get {
				XElement x = this.GetElement(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"), value, "timezone_validity", global::schemas.openehr.org.v1.VALIDITY_KIND.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IntervalOfDate range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((IntervalOfDate)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, "assumed_value", global::schemas.openehr.org.v1.Iso8601Date.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DATE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("pattern", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(IntervalOfDate));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class DateConstraintPattern
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"[yY][yY][yY][yY]-[mM?X][mM?X]-[dD?X][dD?X]"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private DateConstraintPattern() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DATE_TIME : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DATE_TIME(XElement xe) { return XTypedServices.ToXTypedElement<C_DATE_TIME>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DATE_TIME() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pattern", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("timezone_validity", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public C_DATE_TIME() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string pattern {
			get {
				XElement x = this.GetElement(XName.Get("pattern", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("pattern", "http://schemas.openehr.org/v1"), value, "pattern", global::schemas.openehr.org.v1.DateTimeConstraintPattern.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<decimal> timezone_validity {
			get {
				XElement x = this.GetElement(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"), value, "timezone_validity", global::schemas.openehr.org.v1.VALIDITY_KIND.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IntervalOfDateTime range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((IntervalOfDateTime)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, "assumed_value", global::schemas.openehr.org.v1.Iso8601DateTime.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DATE_TIME", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DATE_TIME>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("pattern", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(IntervalOfDateTime));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class DateTimeConstraintPattern
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"[yY][yY][yY][yY]-[mM?][mM?]-[dD?X][dD?X][T][hH?X][hH?X]:[mM?X][mM?X]:[sS?X][sS?X]" +
							""}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private DateTimeConstraintPattern() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_TIME : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_TIME(XElement xe) { return XTypedServices.ToXTypedElement<C_TIME>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_TIME() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pattern", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("timezone_validity", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public C_TIME() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string pattern {
			get {
				XElement x = this.GetElement(XName.Get("pattern", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("pattern", "http://schemas.openehr.org/v1"), value, "pattern", global::schemas.openehr.org.v1.TimeConstraintPattern.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public System.Nullable<decimal> timezone_validity {
			get {
				XElement x = this.GetElement(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"), value, "timezone_validity", global::schemas.openehr.org.v1.VALIDITY_KIND.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IntervalOfTime range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((IntervalOfTime)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, timezone_validity?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, "assumed_value", global::schemas.openehr.org.v1.Iso8601Time.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_TIME", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_TIME>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("pattern", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("timezone_validity", "http://schemas.openehr.org/v1"), typeof(decimal));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(IntervalOfTime));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class TimeConstraintPattern
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"[hH][hH]:[mM?X][mM?X]:[sS?X][sS?X]"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private TimeConstraintPattern() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (pattern?, range?, assumed_value?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DURATION : global::schemas.openehr.org.v1.C_PRIMITIVE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DURATION(XElement xe) { return XTypedServices.ToXTypedElement<C_DURATION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DURATION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pattern", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("range", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (pattern?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public C_DURATION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string pattern {
			get {
				XElement x = this.GetElement(XName.Get("pattern", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("pattern", "http://schemas.openehr.org/v1"), value, "pattern", global::schemas.openehr.org.v1.DurationConstraintPattern.TypeDefinition);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public IntervalOfDuration range {
			get {
				XElement x = this.GetElement(XName.Get("range", "http://schemas.openehr.org/v1"));
				return ((IntervalOfDuration)(x));
			}
			set {
				this.SetElement(XName.Get("range", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (pattern?, range?, assumed_value?)
		/// </para>
		/// </summary>
		public string assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElementWithValidation(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value, "assumed_value", global::schemas.openehr.org.v1.Iso8601Duration.TypeDefinition);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DURATION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DURATION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("pattern", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("range", "http://schemas.openehr.org/v1"), typeof(IntervalOfDuration));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public sealed class DurationConstraintPattern
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
						"(P[yY]?[mM]?[wW]?[dD]?T[hH]?[mM]?[sS]?)|(P[yY]?[mM]?[wW]?[dD]?)"}, 0, XmlSchemaWhiteSpace.Preserve));
		
		private DurationConstraintPattern() {
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (term_definitions+, constraint_definitions*, term_bindings*, constraint_bindings*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ARCHETYPE_ONTOLOGY : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<CodeDefinitionSet> term_definitionsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<CodeDefinitionSet> constraint_definitionsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<TermBindingSet> term_bindingsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<ConstraintBindingSet> constraint_bindingsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ARCHETYPE_ONTOLOGY(XElement xe) { return XTypedServices.ToXTypedElement<ARCHETYPE_ONTOLOGY>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ARCHETYPE_ONTOLOGY() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("term_definitions", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("constraint_definitions", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("term_bindings", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("constraint_bindings", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (term_definitions+, constraint_definitions*, term_bindings*, constraint_bindings*)
		/// </para>
		/// </summary>
		public ARCHETYPE_ONTOLOGY() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (term_definitions+, constraint_definitions*, term_bindings*, constraint_bindings*)
		/// </para>
		/// </summary>
		public IList<CodeDefinitionSet> term_definitions {
			get {
				if ((this.term_definitionsField == null)) {
					this.term_definitionsField = new XTypedList<CodeDefinitionSet>(this, LinqToXsdTypeManager.Instance, XName.Get("term_definitions", "http://schemas.openehr.org/v1"));
				}
				return this.term_definitionsField;
			}
			set {
				if ((value == null)) {
					this.term_definitionsField = null;
				}
				else {
					if ((this.term_definitionsField == null)) {
						this.term_definitionsField = XTypedList<CodeDefinitionSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("term_definitions", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<CodeDefinitionSet>(this.term_definitionsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (term_definitions+, constraint_definitions*, term_bindings*, constraint_bindings*)
		/// </para>
		/// </summary>
		public IList<CodeDefinitionSet> constraint_definitions {
			get {
				if ((this.constraint_definitionsField == null)) {
					this.constraint_definitionsField = new XTypedList<CodeDefinitionSet>(this, LinqToXsdTypeManager.Instance, XName.Get("constraint_definitions", "http://schemas.openehr.org/v1"));
				}
				return this.constraint_definitionsField;
			}
			set {
				if ((value == null)) {
					this.constraint_definitionsField = null;
				}
				else {
					if ((this.constraint_definitionsField == null)) {
						this.constraint_definitionsField = XTypedList<CodeDefinitionSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("constraint_definitions", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<CodeDefinitionSet>(this.constraint_definitionsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (term_definitions+, constraint_definitions*, term_bindings*, constraint_bindings*)
		/// </para>
		/// </summary>
		public IList<TermBindingSet> term_bindings {
			get {
				if ((this.term_bindingsField == null)) {
					this.term_bindingsField = new XTypedList<TermBindingSet>(this, LinqToXsdTypeManager.Instance, XName.Get("term_bindings", "http://schemas.openehr.org/v1"));
				}
				return this.term_bindingsField;
			}
			set {
				if ((value == null)) {
					this.term_bindingsField = null;
				}
				else {
					if ((this.term_bindingsField == null)) {
						this.term_bindingsField = XTypedList<TermBindingSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("term_bindings", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<TermBindingSet>(this.term_bindingsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (term_definitions+, constraint_definitions*, term_bindings*, constraint_bindings*)
		/// </para>
		/// </summary>
		public IList<ConstraintBindingSet> constraint_bindings {
			get {
				if ((this.constraint_bindingsField == null)) {
					this.constraint_bindingsField = new XTypedList<ConstraintBindingSet>(this, LinqToXsdTypeManager.Instance, XName.Get("constraint_bindings", "http://schemas.openehr.org/v1"));
				}
				return this.constraint_bindingsField;
			}
			set {
				if ((value == null)) {
					this.constraint_bindingsField = null;
				}
				else {
					if ((this.constraint_bindingsField == null)) {
						this.constraint_bindingsField = XTypedList<ConstraintBindingSet>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("constraint_bindings", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<ConstraintBindingSet>(this.constraint_bindingsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE_ONTOLOGY", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ARCHETYPE_ONTOLOGY>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("term_definitions", "http://schemas.openehr.org/v1"), typeof(CodeDefinitionSet));
			localElementDictionary.Add(XName.Get("constraint_definitions", "http://schemas.openehr.org/v1"), typeof(CodeDefinitionSet));
			localElementDictionary.Add(XName.Get("term_bindings", "http://schemas.openehr.org/v1"), typeof(TermBindingSet));
			localElementDictionary.Add(XName.Get("constraint_bindings", "http://schemas.openehr.org/v1"), typeof(ConstraintBindingSet));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (items*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class CodeDefinitionSet : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<ARCHETYPE_TERM> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator CodeDefinitionSet(XElement xe) { return XTypedServices.ToXTypedElement<CodeDefinitionSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static CodeDefinitionSet() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public CodeDefinitionSet() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public IList<ARCHETYPE_TERM> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<ARCHETYPE_TERM>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<ARCHETYPE_TERM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<ARCHETYPE_TERM>(this.itemsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string language {
			get {
				XAttribute x = this.Attribute(XName.Get("language", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("language", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("CodeDefinitionSet", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<CodeDefinitionSet>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(ARCHETYPE_TERM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (items+)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ARCHETYPE_TERM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<StringDictionaryItem> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ARCHETYPE_TERM(XElement xe) { return XTypedServices.ToXTypedElement<ARCHETYPE_TERM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ARCHETYPE_TERM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (items+)
		/// </para>
		/// </summary>
		public ARCHETYPE_TERM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (items+)
		/// </para>
		/// </summary>
		public IList<StringDictionaryItem> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<StringDictionaryItem>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<StringDictionaryItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<StringDictionaryItem>(this.itemsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string code {
			get {
				XAttribute x = this.Attribute(XName.Get("code", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ARCHETYPE_TERM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ARCHETYPE_TERM>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(StringDictionaryItem));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (items*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TermBindingSet : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<TERM_BINDING_ITEM> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TermBindingSet(XElement xe) { return XTypedServices.ToXTypedElement<TermBindingSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TermBindingSet() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public TermBindingSet() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public IList<TERM_BINDING_ITEM> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<TERM_BINDING_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<TERM_BINDING_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<TERM_BINDING_ITEM>(this.itemsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string terminology {
			get {
				XAttribute x = this.Attribute(XName.Get("terminology", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("terminology", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TermBindingSet", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TermBindingSet>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(TERM_BINDING_ITEM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TERM_BINDING_ITEM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TERM_BINDING_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<TERM_BINDING_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TERM_BINDING_ITEM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public TERM_BINDING_ITEM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public CODE_PHRASE value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string code {
			get {
				XAttribute x = this.Attribute(XName.Get("code", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TERM_BINDING_ITEM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TERM_BINDING_ITEM>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (items*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class ConstraintBindingSet : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<CONSTRAINT_BINDING_ITEM> itemsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator ConstraintBindingSet(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintBindingSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static ConstraintBindingSet() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("items", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public ConstraintBindingSet() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (items*)
		/// </para>
		/// </summary>
		public IList<CONSTRAINT_BINDING_ITEM> items {
			get {
				if ((this.itemsField == null)) {
					this.itemsField = new XTypedList<CONSTRAINT_BINDING_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("items", "http://schemas.openehr.org/v1"));
				}
				return this.itemsField;
			}
			set {
				if ((value == null)) {
					this.itemsField = null;
				}
				else {
					if ((this.itemsField == null)) {
						this.itemsField = XTypedList<CONSTRAINT_BINDING_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("items", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<CONSTRAINT_BINDING_ITEM>(this.itemsField, value);
					}
				}
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string terminology {
			get {
				XAttribute x = this.Attribute(XName.Get("terminology", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("terminology", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("ConstraintBindingSet", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<ConstraintBindingSet>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("items", "http://schemas.openehr.org/v1"), typeof(CONSTRAINT_BINDING_ITEM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class CONSTRAINT_BINDING_ITEM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator CONSTRAINT_BINDING_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<CONSTRAINT_BINDING_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static CONSTRAINT_BINDING_ITEM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public CONSTRAINT_BINDING_ITEM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (value)
		/// </para>
		/// </summary>
		public System.Uri value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string code {
			get {
				XAttribute x = this.Attribute(XName.Get("code", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("CONSTRAINT_BINDING_ITEM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<CONSTRAINT_BINDING_ITEM>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(System.Uri));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, terminology_id?, code_list*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_CODE_PHRASE : global::schemas.openehr.org.v1.C_DOMAIN_TYPE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XSimpleList<string> code_listField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_CODE_PHRASE(XElement xe) { return XTypedServices.ToXTypedElement<C_CODE_PHRASE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_CODE_PHRASE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("terminology_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("code_list", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, terminology_id?, code_list*)
		/// </para>
		/// </summary>
		public C_CODE_PHRASE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, terminology_id?, code_list*)
		/// </para>
		/// </summary>
		public CODE_PHRASE assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, terminology_id?, code_list*)
		/// </para>
		/// </summary>
		public TERMINOLOGY_ID terminology_id {
			get {
				XElement x = this.GetElement(XName.Get("terminology_id", "http://schemas.openehr.org/v1"));
				return ((TERMINOLOGY_ID)(x));
			}
			set {
				this.SetElement(XName.Get("terminology_id", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, terminology_id?, code_list*)
		/// </para>
		/// </summary>
		public IList<string> code_list {
			get {
				if ((this.code_listField == null)) {
					this.code_listField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("code_list", "http://schemas.openehr.org/v1"));
				}
				return this.code_listField;
			}
			set {
				if ((value == null)) {
					this.code_listField = null;
				}
				else {
					if ((this.code_listField == null)) {
						this.code_listField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("code_list", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<System.String>(this.code_listField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_CODE_PHRASE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_CODE_PHRASE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("terminology_id", "http://schemas.openehr.org/v1"), typeof(TERMINOLOGY_ID));
			localElementDictionary.Add(XName.Get("code_list", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, list*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DV_ORDINAL : global::schemas.openehr.org.v1.C_DOMAIN_TYPE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<DV_ORDINAL> listField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DV_ORDINAL(XElement xe) { return XTypedServices.ToXTypedElement<C_DV_ORDINAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DV_ORDINAL() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("list", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, list*)
		/// </para>
		/// </summary>
		public C_DV_ORDINAL() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, list*)
		/// </para>
		/// </summary>
		public DV_ORDINAL assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return ((DV_ORDINAL)(x));
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, list*)
		/// </para>
		/// </summary>
		public IList<DV_ORDINAL> list {
			get {
				if ((this.listField == null)) {
					this.listField = new XTypedList<DV_ORDINAL>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "http://schemas.openehr.org/v1"));
				}
				return this.listField;
			}
			set {
				if ((value == null)) {
					this.listField = null;
				}
				else {
					if ((this.listField == null)) {
						this.listField = XTypedList<DV_ORDINAL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<DV_ORDINAL>(this.listField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DV_ORDINAL", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DV_ORDINAL>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(DV_ORDINAL));
			localElementDictionary.Add(XName.Get("list", "http://schemas.openehr.org/v1"), typeof(DV_ORDINAL));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, property?, list*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DV_QUANTITY : global::schemas.openehr.org.v1.C_DOMAIN_TYPE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<C_QUANTITY_ITEM> listField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DV_QUANTITY(XElement xe) { return XTypedServices.ToXTypedElement<C_DV_QUANTITY>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DV_QUANTITY() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("property", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("list", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, property?, list*)
		/// </para>
		/// </summary>
		public C_DV_QUANTITY() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, property?, list*)
		/// </para>
		/// </summary>
		public DV_QUANTITY assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return ((DV_QUANTITY)(x));
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, property?, list*)
		/// </para>
		/// </summary>
		public CODE_PHRASE property {
			get {
				XElement x = this.GetElement(XName.Get("property", "http://schemas.openehr.org/v1"));
				return ((CODE_PHRASE)(x));
			}
			set {
				this.SetElement(XName.Get("property", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, property?, list*)
		/// </para>
		/// </summary>
		public IList<C_QUANTITY_ITEM> list {
			get {
				if ((this.listField == null)) {
					this.listField = new XTypedList<C_QUANTITY_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("list", "http://schemas.openehr.org/v1"));
				}
				return this.listField;
			}
			set {
				if ((value == null)) {
					this.listField = null;
				}
				else {
					if ((this.listField == null)) {
						this.listField = XTypedList<C_QUANTITY_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("list", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<C_QUANTITY_ITEM>(this.listField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DV_QUANTITY", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DV_QUANTITY>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(DV_QUANTITY));
			localElementDictionary.Add(XName.Get("property", "http://schemas.openehr.org/v1"), typeof(CODE_PHRASE));
			localElementDictionary.Add(XName.Get("list", "http://schemas.openehr.org/v1"), typeof(C_QUANTITY_ITEM));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (magnitude?, precision?, units)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_QUANTITY_ITEM : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_QUANTITY_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<C_QUANTITY_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_QUANTITY_ITEM() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("magnitude", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("precision", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("units", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (magnitude?, precision?, units)
		/// </para>
		/// </summary>
		public C_QUANTITY_ITEM() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (magnitude?, precision?, units)
		/// </para>
		/// </summary>
		public IntervalOfReal magnitude {
			get {
				XElement x = this.GetElement(XName.Get("magnitude", "http://schemas.openehr.org/v1"));
				return ((IntervalOfReal)(x));
			}
			set {
				this.SetElement(XName.Get("magnitude", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (magnitude?, precision?, units)
		/// </para>
		/// </summary>
		public IntervalOfInteger precision {
			get {
				XElement x = this.GetElement(XName.Get("precision", "http://schemas.openehr.org/v1"));
				return ((IntervalOfInteger)(x));
			}
			set {
				this.SetElement(XName.Get("precision", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (magnitude?, precision?, units)
		/// </para>
		/// </summary>
		public string units {
			get {
				XElement x = this.GetElement(XName.Get("units", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("units", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_QUANTITY_ITEM", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_QUANTITY_ITEM>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("magnitude", "http://schemas.openehr.org/v1"), typeof(IntervalOfReal));
			localElementDictionary.Add(XName.Get("precision", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("units", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, value)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class C_DV_STATE : global::schemas.openehr.org.v1.C_DOMAIN_TYPE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator C_DV_STATE(XElement xe) { return XTypedServices.ToXTypedElement<C_DV_STATE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static C_DV_STATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rm_type_name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("occurrences", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("node_id", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("any_allowed", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("assumed_value", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("value", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, value)
		/// </para>
		/// </summary>
		public C_DV_STATE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, value)
		/// </para>
		/// </summary>
		public DV_STATE assumed_value {
			get {
				XElement x = this.GetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"));
				return ((DV_STATE)(x));
			}
			set {
				this.SetElement(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (rm_type_name, occurrences, node_id, any_allowed, assumed_value?, value)
		/// </para>
		/// </summary>
		public STATE_MACHINE value {
			get {
				XElement x = this.GetElement(XName.Get("value", "http://schemas.openehr.org/v1"));
				return ((STATE_MACHINE)(x));
			}
			set {
				this.SetElement(XName.Get("value", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("C_DV_STATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<C_DV_STATE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("rm_type_name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("occurrences", "http://schemas.openehr.org/v1"), typeof(IntervalOfInteger));
			localElementDictionary.Add(XName.Get("node_id", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("any_allowed", "http://schemas.openehr.org/v1"), typeof(bool));
			localElementDictionary.Add(XName.Get("assumed_value", "http://schemas.openehr.org/v1"), typeof(DV_STATE));
			localElementDictionary.Add(XName.Get("value", "http://schemas.openehr.org/v1"), typeof(STATE_MACHINE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (states+)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class STATE_MACHINE : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<STATE> statesField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator STATE_MACHINE(XElement xe) { return XTypedServices.ToXTypedElement<STATE_MACHINE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static STATE_MACHINE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("states", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (states+)
		/// </para>
		/// </summary>
		public STATE_MACHINE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (states+)
		/// </para>
		/// </summary>
		public IList<STATE> states {
			get {
				if ((this.statesField == null)) {
					this.statesField = new XTypedList<STATE>(this, LinqToXsdTypeManager.Instance, XName.Get("states", "http://schemas.openehr.org/v1"));
				}
				return this.statesField;
			}
			set {
				if ((value == null)) {
					this.statesField = null;
				}
				else {
					if ((this.statesField == null)) {
						this.statesField = XTypedList<STATE>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("states", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<STATE>(this.statesField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("STATE_MACHINE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<STATE_MACHINE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("states", "http://schemas.openehr.org/v1"), typeof(STATE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (name)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class STATE : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator STATE(XElement xe) {  return (STATE)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static STATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (name)
		/// </para>
		/// </summary>
		public STATE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (name)
		/// </para>
		/// </summary>
		public string name {
			get {
				XElement x = this.GetElement(XName.Get("name", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("name", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("STATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("name", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (name, transitions+)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class NON_TERMINAL_STATE : global::schemas.openehr.org.v1.STATE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<TRANSITION> transitionsField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator NON_TERMINAL_STATE(XElement xe) { return XTypedServices.ToXTypedElement<NON_TERMINAL_STATE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static NON_TERMINAL_STATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("transitions", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (name, transitions+)
		/// </para>
		/// </summary>
		public NON_TERMINAL_STATE() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required, repeating
		/// </para>
		/// <para>
		/// Regular expression: (name, transitions+)
		/// </para>
		/// </summary>
		public IList<TRANSITION> transitions {
			get {
				if ((this.transitionsField == null)) {
					this.transitionsField = new XTypedList<TRANSITION>(this, LinqToXsdTypeManager.Instance, XName.Get("transitions", "http://schemas.openehr.org/v1"));
				}
				return this.transitionsField;
			}
			set {
				if ((value == null)) {
					this.transitionsField = null;
				}
				else {
					if ((this.transitionsField == null)) {
						this.transitionsField = XTypedList<TRANSITION>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("transitions", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<TRANSITION>(this.transitionsField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("NON_TERMINAL_STATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<NON_TERMINAL_STATE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("name", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("transitions", "http://schemas.openehr.org/v1"), typeof(TRANSITION));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (name)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TERMINAL_STATE : global::schemas.openehr.org.v1.STATE, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TERMINAL_STATE(XElement xe) { return XTypedServices.ToXTypedElement<TERMINAL_STATE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TERMINAL_STATE() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (name)
		/// </para>
		/// </summary>
		public TERMINAL_STATE() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TERMINAL_STATE", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TERMINAL_STATE>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("name", "http://schemas.openehr.org/v1"), typeof(string));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (@event, action?, guard?, next_state?)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class TRANSITION : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator TRANSITION(XElement xe) { return XTypedServices.ToXTypedElement<TRANSITION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static TRANSITION() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("event", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("action", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("guard", "http://schemas.openehr.org/v1")), new NamedContentModelEntity(XName.Get("next_state", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (@event, action?, guard?, next_state?)
		/// </para>
		/// </summary>
		public TRANSITION() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (@event, action?, guard?, next_state?)
		/// </para>
		/// </summary>
		public string @event {
			get {
				XElement x = this.GetElement(XName.Get("event", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("event", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (@event, action?, guard?, next_state?)
		/// </para>
		/// </summary>
		public string action {
			get {
				XElement x = this.GetElement(XName.Get("action", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("action", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (@event, action?, guard?, next_state?)
		/// </para>
		/// </summary>
		public string guard {
			get {
				XElement x = this.GetElement(XName.Get("guard", "http://schemas.openehr.org/v1"));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetElement(XName.Get("guard", "http://schemas.openehr.org/v1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (@event, action?, guard?, next_state?)
		/// </para>
		/// </summary>
		public STATE next_state {
			get {
				XElement x = this.GetElement(XName.Get("next_state", "http://schemas.openehr.org/v1"));
				return ((STATE)(x));
			}
			set {
				this.SetElement(XName.Get("next_state", "http://schemas.openehr.org/v1"), value);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("TRANSITION", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<TRANSITION>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("event", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("action", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("guard", "http://schemas.openehr.org/v1"), typeof(string));
			localElementDictionary.Add(XName.Get("next_state", "http://schemas.openehr.org/v1"), typeof(STATE));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class content_item : XTypedElement, IXMetaData
	{
		
		 public static explicit operator content_item(XElement xe) {  return (content_item)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public content_item() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public string path {
			get {
				XAttribute x = this.Attribute(XName.Get("path", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public System.Nullable<int> max {
			get {
				XAttribute x = this.Attribute(XName.Get("max", ""));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("max", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public System.Nullable<int> min {
			get {
				XAttribute x = this.Attribute(XName.Get("min", ""));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("min", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("content_item", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class archetyped : global::schemas.openehr.org.v1.content_item, IXMetaData
	{
		
		 public static explicit operator archetyped(XElement xe) {  return (archetyped)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public archetyped() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string archetype_id {
			get {
				XAttribute x = this.Attribute(XName.Get("archetype_id", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("archetype_id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("archetyped", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (Item*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class composition : global::schemas.openehr.org.v1.archetyped, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<content_item> ItemField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator composition(XElement xe) { return XTypedServices.ToXTypedElement<composition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static composition() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Item", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (Item*)
		/// </para>
		/// </summary>
		public composition() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (Item*)
		/// </para>
		/// </summary>
		public IList<content_item> Item {
			get {
				if ((this.ItemField == null)) {
					this.ItemField = new XTypedList<content_item>(this, LinqToXsdTypeManager.Instance, XName.Get("Item", "http://schemas.openehr.org/v1"));
				}
				return this.ItemField;
			}
			set {
				if ((value == null)) {
					this.ItemField = null;
				}
				else {
					if ((this.ItemField == null)) {
						this.ItemField = XTypedList<content_item>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Item", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<content_item>(this.ItemField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("composition", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<composition>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("Item", "http://schemas.openehr.org/v1"), typeof(content_item));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (Item*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class section : global::schemas.openehr.org.v1.archetyped, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<content_item> ItemField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator section(XElement xe) { return XTypedServices.ToXTypedElement<section>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static section() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Item", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (Item*)
		/// </para>
		/// </summary>
		public section() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (Item*)
		/// </para>
		/// </summary>
		public IList<content_item> Item {
			get {
				if ((this.ItemField == null)) {
					this.ItemField = new XTypedList<content_item>(this, LinqToXsdTypeManager.Instance, XName.Get("Item", "http://schemas.openehr.org/v1"));
				}
				return this.ItemField;
			}
			set {
				if ((value == null)) {
					this.ItemField = null;
				}
				else {
					if ((this.ItemField == null)) {
						this.ItemField = XTypedList<content_item>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Item", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<content_item>(this.ItemField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("section", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<section>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("Item", "http://schemas.openehr.org/v1"), typeof(content_item));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (Item*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class sub_section : global::schemas.openehr.org.v1.content_item, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<content_item> ItemField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator sub_section(XElement xe) { return XTypedServices.ToXTypedElement<sub_section>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static sub_section() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Item", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (Item*)
		/// </para>
		/// </summary>
		public sub_section() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (Item*)
		/// </para>
		/// </summary>
		public IList<content_item> Item {
			get {
				if ((this.ItemField == null)) {
					this.ItemField = new XTypedList<content_item>(this, LinqToXsdTypeManager.Instance, XName.Get("Item", "http://schemas.openehr.org/v1"));
				}
				return this.ItemField;
			}
			set {
				if ((value == null)) {
					this.ItemField = null;
				}
				else {
					if ((this.ItemField == null)) {
						this.ItemField = XTypedList<content_item>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Item", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<content_item>(this.ItemField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("sub_section", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<sub_section>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("Item", "http://schemas.openehr.org/v1"), typeof(content_item));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (Rule*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public abstract partial class entry : global::schemas.openehr.org.v1.archetyped, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedList<statement> RuleField;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator entry(XElement xe) {  return (entry)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static entry() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Rule", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (Rule*)
		/// </para>
		/// </summary>
		public entry() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (Rule*)
		/// </para>
		/// </summary>
		public IList<statement> Rule {
			get {
				if ((this.RuleField == null)) {
					this.RuleField = new XTypedList<statement>(this, LinqToXsdTypeManager.Instance, XName.Get("Rule", "http://schemas.openehr.org/v1"));
				}
				return this.RuleField;
			}
			set {
				if ((value == null)) {
					this.RuleField = null;
				}
				else {
					if ((this.RuleField == null)) {
						this.RuleField = XTypedList<statement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Rule", "http://schemas.openehr.org/v1"));
					}
					else {
						XTypedServices.SetList<statement>(this.RuleField, value);
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("entry", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("Rule", "http://schemas.openehr.org/v1"), typeof(statement));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (Rule*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class evaluation : global::schemas.openehr.org.v1.entry, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator evaluation(XElement xe) { return XTypedServices.ToXTypedElement<evaluation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static evaluation() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Rule", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (Rule*)
		/// </para>
		/// </summary>
		public evaluation() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("evaluation", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<evaluation>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("Rule", "http://schemas.openehr.org/v1"), typeof(statement));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}
	
	/// <summary>
	/// <para>
	/// Regular expression: (Rule*)
	/// </para>
	/// </summary>
	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class observation : global::schemas.openehr.org.v1.entry, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static ContentModelEntity contentModel;
		
		 public static explicit operator observation(XElement xe) { return XTypedServices.ToXTypedElement<observation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		static observation() {
			BuildElementDictionary();
			contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Rule", "http://schemas.openehr.org/v1")));
		}
		
		/// <summary>
		/// <para>
		/// Regular expression: (Rule*)
		/// </para>
		/// </summary>
		public observation() {
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				return localElementDictionary;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("observation", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<observation>(this);
		}
		
		private static void BuildElementDictionary() {
			localElementDictionary.Add(XName.Get("Rule", "http://schemas.openehr.org/v1"), typeof(statement));
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return contentModel;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class statement : XTypedElement, IXMetaData
	{
		
		 public static explicit operator statement(XElement xe) { return XTypedServices.ToXTypedElement<statement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public statement() {
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string path {
			get {
				XAttribute x = this.Attribute(XName.Get("path", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public System.Nullable<int> max {
			get {
				XAttribute x = this.Attribute(XName.Get("max", ""));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("max", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public System.Nullable<int> min {
			get {
				XAttribute x = this.Attribute(XName.Get("min", ""));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("min", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public System.Nullable<bool> exclusive {
			get {
				XAttribute x = this.Attribute(XName.Get("exclusive", ""));
				if ((x == null)) {
					return null;
				}
				return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("exclusive", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// </summary>
		public string @default {
			get {
				XAttribute x = this.Attribute(XName.Get("default", ""));
				return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
			set {
				this.SetAttribute(XName.Get("default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("statement", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Fragment;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public override XTypedElement Clone() {
			return XTypedServices.CloneXTypedElement<statement>(this);
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class archetype : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private ARCHETYPEType ContentField;
		
		 public static explicit operator archetype(XElement xe) { return XTypedServices.ToXTypedElement<archetype, ARCHETYPEType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public archetype() {
			SetInnerType(new ARCHETYPEType());
		}
		
		public archetype(ARCHETYPEType content) {
			SetInnerType(content);
		}
		
		public override XElement Untyped {
			get {
				return base.Untyped;
			}
			set {
				base.Untyped = value;
				this.ContentField.Untyped = value;
			}
		}
		
		public ARCHETYPEType Content {
			get {
				return ContentField;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public HIER_OBJECT_ID uid {
			get {
				return this.ContentField.uid;
			}
			set {
				this.ContentField.uid = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPE_ID archetype_id {
			get {
				return this.ContentField.archetype_id;
			}
			set {
				this.ContentField.archetype_id = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public string adl_version {
			get {
				return this.ContentField.adl_version;
			}
			set {
				this.ContentField.adl_version = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public string concept {
			get {
				return this.ContentField.concept;
			}
			set {
				this.ContentField.concept = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPE_ID parent_archetype_id {
			get {
				return this.ContentField.parent_archetype_id;
			}
			set {
				this.ContentField.parent_archetype_id = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public C_COMPLEX_OBJECT definition {
			get {
				return this.ContentField.definition;
			}
			set {
				this.ContentField.definition = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: optional, repeating
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public IList<ASSERTION> invariants {
			get {
				return this.ContentField.invariants;
			}
			set {
				this.ContentField.invariants = value;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// <para>
		/// Regular expression: (original_language, is_controlled?, description?, translations*, revision_history?, uid?, archetype_id, adl_version?, concept, parent_archetype_id?, definition, invariants*, ontology)
		/// </para>
		/// </summary>
		public ARCHETYPE_ONTOLOGY ontology {
			get {
				return this.ContentField.ontology;
			}
			set {
				this.ContentField.ontology = value;
			}
		}
		
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
				return schemaMetaData.LocalElementsDictionary;
			}
		}
		
		XTypedElement IXMetaData.Content {
			get {
				return this.Content;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("archetype", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Element;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public void Save(string xmlFile) {
			XTypedServices.Save(xmlFile, Untyped);
		}
		
		public void Save(System.IO.TextWriter tw) {
			XTypedServices.Save(tw, Untyped);
		}
		
		public void Save(System.Xml.XmlWriter xmlWriter) {
			XTypedServices.Save(xmlWriter, Untyped);
		}
		
		public static archetype Load(string xmlFile) {
			return XTypedServices.Load<archetype, ARCHETYPEType>(xmlFile, LinqToXsdTypeManager.Instance);
		}
		
		public static archetype Load(System.IO.TextReader xmlFile) {
			return XTypedServices.Load<archetype, ARCHETYPEType>(xmlFile, LinqToXsdTypeManager.Instance);
		}
		
		public static archetype Parse(string xml) {
			return XTypedServices.Parse<archetype, ARCHETYPEType>(xml, LinqToXsdTypeManager.Instance);
		}
		
		public override XTypedElement Clone() {
			return new archetype(((ARCHETYPEType)(this.Content.Clone())));
		}
		
		private void SetInnerType(ARCHETYPEType ContentField) {
			this.ContentField = ((ARCHETYPEType)(XTypedServices.GetCloneIfRooted(ContentField)));
			XTypedServices.SetName(this, this.ContentField);
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class Root : XTypedElement, IXMetaData
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private archetyped ContentField;
		
		 public static explicit operator Root(XElement xe) { return XTypedServices.ToXTypedElement<Root, archetyped>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
		
		public Root() {
			throw new InvalidOperationException();
		}
		
		public Root(archetyped content) {
			SetInnerType(content);
		}
		
		public override XElement Untyped {
			get {
				return base.Untyped;
			}
			set {
				base.Untyped = value;
				this.ContentField.Untyped = value;
			}
		}
		
		public archetyped Content {
			get {
				return ContentField;
			}
		}
		
		/// <summary>
		/// <para>
		/// Occurrence: required
		/// </para>
		/// </summary>
		public string archetype_id {
			get {
				return this.ContentField.archetype_id;
			}
			set {
				this.ContentField.archetype_id = value;
			}
		}
		
		Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
			get {
				IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
				return schemaMetaData.LocalElementsDictionary;
			}
		}
		
		XTypedElement IXMetaData.Content {
			get {
				return this.Content;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		XName IXMetaData.SchemaName {
			get {
				return XName.Get("Root", "http://schemas.openehr.org/v1");
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		SchemaOrigin IXMetaData.TypeOrigin {
			get {
				return SchemaOrigin.Element;
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ILinqToXsdTypeManager IXMetaData.TypeManager {
			get {
				return LinqToXsdTypeManager.Instance;
			}
		}
		
		public void Save(string xmlFile) {
			XTypedServices.Save(xmlFile, Untyped);
		}
		
		public void Save(System.IO.TextWriter tw) {
			XTypedServices.Save(tw, Untyped);
		}
		
		public void Save(System.Xml.XmlWriter xmlWriter) {
			XTypedServices.Save(xmlWriter, Untyped);
		}
		
		public static Root Load(string xmlFile) {
			return XTypedServices.Load<Root, archetyped>(xmlFile, LinqToXsdTypeManager.Instance);
		}
		
		public static Root Load(System.IO.TextReader xmlFile) {
			return XTypedServices.Load<Root, archetyped>(xmlFile, LinqToXsdTypeManager.Instance);
		}
		
		public static Root Parse(string xml) {
			return XTypedServices.Parse<Root, archetyped>(xml, LinqToXsdTypeManager.Instance);
		}
		
		public override XTypedElement Clone() {
			return new Root(((archetyped)(this.Content.Clone())));
		}
		
		private void SetInnerType(archetyped ContentField) {
			this.ContentField = ((archetyped)(XTypedServices.GetCloneIfRooted(ContentField)));
			XTypedServices.SetName(this, this.ContentField);
		}
		
		ContentModelEntity IXMetaData.GetContentModel() {
			return ContentModelEntity.Default;
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public class LinqToXsdTypeManager : ILinqToXsdTypeManager
	{
		
		static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
		
		static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
		
		static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
		
		private static XmlSchemaSet schemaSet;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
		
		static LinqToXsdTypeManager() {
			BuildTypeDictionary();
			BuildElementDictionary();
			BuildWrapperDictionary();
		}
		
		XmlSchemaSet ILinqToXsdTypeManager.Schemas {
			get {
				if ((schemaSet == null)) {
					XmlSchemaSet tempSet = new XmlSchemaSet();
					System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
				}
				return schemaSet;
			}
			set {
				schemaSet = value;
			}
		}
		
		Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
			get {
				return typeDictionary;
			}
		}
		
		Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
			get {
				return elementDictionary;
			}
		}
		
		Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
			get {
				return wrapperDictionary;
			}
		}
		
		public static LinqToXsdTypeManager Instance {
			get {
				return typeManagerSingleton;
			}
		}
		
		private static void BuildTypeDictionary() {
			typeDictionary.Add(XName.Get("DATA_VALUE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DATA_VALUE));
			typeDictionary.Add(XName.Get("DV_BOOLEAN", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_BOOLEAN));
			typeDictionary.Add(XName.Get("DV_IDENTIFIER", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_IDENTIFIER));
			typeDictionary.Add(XName.Get("DV_STATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_STATE));
			typeDictionary.Add(XName.Get("DV_ORDERED", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_ORDERED));
			typeDictionary.Add(XName.Get("DV_INTERVAL", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_INTERVAL));
			typeDictionary.Add(XName.Get("REFERENCE_RANGE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.REFERENCE_RANGE));
			typeDictionary.Add(XName.Get("DV_QUANTIFIED", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_QUANTIFIED));
			typeDictionary.Add(XName.Get("DV_COUNT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_COUNT));
			typeDictionary.Add(XName.Get("DV_AMOUNT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_AMOUNT));
			typeDictionary.Add(XName.Get("DV_TEMPORAL", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_TEMPORAL));
			typeDictionary.Add(XName.Get("DV_QUANTITY", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_QUANTITY));
			typeDictionary.Add(XName.Get("DV_ORDINAL", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_ORDINAL));
			typeDictionary.Add(XName.Get("DV_PROPORTION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_PROPORTION));
			typeDictionary.Add(XName.Get("DV_PARAGRAPH", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_PARAGRAPH));
			typeDictionary.Add(XName.Get("DV_TEXT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_TEXT));
			typeDictionary.Add(XName.Get("DV_CODED_TEXT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_CODED_TEXT));
			typeDictionary.Add(XName.Get("CODE_PHRASE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.CODE_PHRASE));
			typeDictionary.Add(XName.Get("TERM_MAPPING", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TERM_MAPPING));
			typeDictionary.Add(XName.Get("DV_DATE_TIME", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_DATE_TIME));
			typeDictionary.Add(XName.Get("DV_TIME", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_TIME));
			typeDictionary.Add(XName.Get("DV_DATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_DATE));
			typeDictionary.Add(XName.Get("DV_DURATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_DURATION));
			typeDictionary.Add(XName.Get("DV_TIME_SPECIFICATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_TIME_SPECIFICATION));
			typeDictionary.Add(XName.Get("DV_PERIODIC_TIME_SPECIFICATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_PERIODIC_TIME_SPECIFICATION));
			typeDictionary.Add(XName.Get("DV_GENERAL_TIME_SPECIFICATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_GENERAL_TIME_SPECIFICATION));
			typeDictionary.Add(XName.Get("DV_ENCAPSULATED", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_ENCAPSULATED));
			typeDictionary.Add(XName.Get("DV_MULTIMEDIA", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_MULTIMEDIA));
			typeDictionary.Add(XName.Get("DV_PARSABLE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_PARSABLE));
			typeDictionary.Add(XName.Get("DV_URI", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_URI));
			typeDictionary.Add(XName.Get("DV_EHR_URI", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.DV_EHR_URI));
			typeDictionary.Add(XName.Get("OBJECT_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.OBJECT_ID));
			typeDictionary.Add(XName.Get("UID_BASED_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.UID_BASED_ID));
			typeDictionary.Add(XName.Get("OBJECT_VERSION_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.OBJECT_VERSION_ID));
			typeDictionary.Add(XName.Get("ARCHETYPE_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPE_ID));
			typeDictionary.Add(XName.Get("TEMPLATE_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TEMPLATE_ID));
			typeDictionary.Add(XName.Get("TERMINOLOGY_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TERMINOLOGY_ID));
			typeDictionary.Add(XName.Get("HIER_OBJECT_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.HIER_OBJECT_ID));
			typeDictionary.Add(XName.Get("GENERIC_ID", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.GENERIC_ID));
			typeDictionary.Add(XName.Get("OBJECT_REF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.OBJECT_REF));
			typeDictionary.Add(XName.Get("PARTY_REF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.PARTY_REF));
			typeDictionary.Add(XName.Get("ACCESS_GROUP_REF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ACCESS_GROUP_REF));
			typeDictionary.Add(XName.Get("LOCATABLE_REF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.LOCATABLE_REF));
			typeDictionary.Add(XName.Get("REVISION_HISTORY_ITEM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.REVISION_HISTORY_ITEM));
			typeDictionary.Add(XName.Get("REVISION_HISTORY", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.REVISION_HISTORY));
			typeDictionary.Add(XName.Get("AUDIT_DETAILS", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.AUDIT_DETAILS));
			typeDictionary.Add(XName.Get("ATTESTATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ATTESTATION));
			typeDictionary.Add(XName.Get("PARTY_PROXY", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.PARTY_PROXY));
			typeDictionary.Add(XName.Get("PARTY_IDENTIFIED", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.PARTY_IDENTIFIED));
			typeDictionary.Add(XName.Get("PARTY_RELATED", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.PARTY_RELATED));
			typeDictionary.Add(XName.Get("PARTY_SELF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.PARTY_SELF));
			typeDictionary.Add(XName.Get("PARTICIPATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.PARTICIPATION));
			typeDictionary.Add(XName.Get("FEEDER_AUDIT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.FEEDER_AUDIT));
			typeDictionary.Add(XName.Get("FEEDER_AUDIT_DETAILS", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.FEEDER_AUDIT_DETAILS));
			typeDictionary.Add(XName.Get("Interval", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.Interval));
			typeDictionary.Add(XName.Get("IntervalOfInteger", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.IntervalOfInteger));
			typeDictionary.Add(XName.Get("IntervalOfReal", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.IntervalOfReal));
			typeDictionary.Add(XName.Get("IntervalOfDate", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.IntervalOfDate));
			typeDictionary.Add(XName.Get("IntervalOfDateTime", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.IntervalOfDateTime));
			typeDictionary.Add(XName.Get("IntervalOfTime", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.IntervalOfTime));
			typeDictionary.Add(XName.Get("IntervalOfDuration", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.IntervalOfDuration));
			typeDictionary.Add(XName.Get("AUTHORED_RESOURCE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.AUTHORED_RESOURCE));
			typeDictionary.Add(XName.Get("TRANSLATION_DETAILS", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TRANSLATION_DETAILS));
			typeDictionary.Add(XName.Get("RESOURCE_DESCRIPTION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.RESOURCE_DESCRIPTION));
			typeDictionary.Add(XName.Get("RESOURCE_DESCRIPTION_ITEM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.RESOURCE_DESCRIPTION_ITEM));
			typeDictionary.Add(XName.Get("StringDictionaryItem", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.StringDictionaryItem));
			typeDictionary.Add(XName.Get("ARCHETYPE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPEType));
			typeDictionary.Add(XName.Get("ARCHETYPE_CONSTRAINT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPE_CONSTRAINT));
			typeDictionary.Add(XName.Get("C_OBJECT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_OBJECT));
			typeDictionary.Add(XName.Get("C_ATTRIBUTE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_ATTRIBUTE));
			typeDictionary.Add(XName.Get("C_SINGLE_ATTRIBUTE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_SINGLE_ATTRIBUTE));
			typeDictionary.Add(XName.Get("C_MULTIPLE_ATTRIBUTE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_MULTIPLE_ATTRIBUTE));
			typeDictionary.Add(XName.Get("CARDINALITY", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.CARDINALITY));
			typeDictionary.Add(XName.Get("C_COMPLEX_OBJECT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_COMPLEX_OBJECT));
			typeDictionary.Add(XName.Get("ARCHETYPE_SLOT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPE_SLOT));
			typeDictionary.Add(XName.Get("CONSTRAINT_REF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.CONSTRAINT_REF));
			typeDictionary.Add(XName.Get("C_DEFINED_OBJECT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DEFINED_OBJECT));
			typeDictionary.Add(XName.Get("C_PRIMITIVE_OBJECT", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_PRIMITIVE_OBJECT));
			typeDictionary.Add(XName.Get("C_DOMAIN_TYPE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DOMAIN_TYPE));
			typeDictionary.Add(XName.Get("ARCHETYPE_INTERNAL_REF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPE_INTERNAL_REF));
			typeDictionary.Add(XName.Get("ASSERTION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ASSERTION));
			typeDictionary.Add(XName.Get("EXPR_ITEM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.EXPR_ITEM));
			typeDictionary.Add(XName.Get("ASSERTION_VARIABLE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ASSERTION_VARIABLE));
			typeDictionary.Add(XName.Get("EXPR_LEAF", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.EXPR_LEAF));
			typeDictionary.Add(XName.Get("EXPR_OPERATOR", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.EXPR_OPERATOR));
			typeDictionary.Add(XName.Get("EXPR_UNARY_OPERATOR", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.EXPR_UNARY_OPERATOR));
			typeDictionary.Add(XName.Get("EXPR_BINARY_OPERATOR", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.EXPR_BINARY_OPERATOR));
			typeDictionary.Add(XName.Get("C_PRIMITIVE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_PRIMITIVE));
			typeDictionary.Add(XName.Get("C_BOOLEAN", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_BOOLEAN));
			typeDictionary.Add(XName.Get("C_STRING", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_STRING));
			typeDictionary.Add(XName.Get("C_INTEGER", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_INTEGER));
			typeDictionary.Add(XName.Get("C_REAL", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_REAL));
			typeDictionary.Add(XName.Get("C_DATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DATE));
			typeDictionary.Add(XName.Get("C_DATE_TIME", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DATE_TIME));
			typeDictionary.Add(XName.Get("C_TIME", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_TIME));
			typeDictionary.Add(XName.Get("C_DURATION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DURATION));
			typeDictionary.Add(XName.Get("ARCHETYPE_ONTOLOGY", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPE_ONTOLOGY));
			typeDictionary.Add(XName.Get("CodeDefinitionSet", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.CodeDefinitionSet));
			typeDictionary.Add(XName.Get("ARCHETYPE_TERM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ARCHETYPE_TERM));
			typeDictionary.Add(XName.Get("TermBindingSet", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TermBindingSet));
			typeDictionary.Add(XName.Get("TERM_BINDING_ITEM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TERM_BINDING_ITEM));
			typeDictionary.Add(XName.Get("ConstraintBindingSet", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.ConstraintBindingSet));
			typeDictionary.Add(XName.Get("CONSTRAINT_BINDING_ITEM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.CONSTRAINT_BINDING_ITEM));
			typeDictionary.Add(XName.Get("C_CODE_PHRASE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_CODE_PHRASE));
			typeDictionary.Add(XName.Get("C_DV_ORDINAL", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DV_ORDINAL));
			typeDictionary.Add(XName.Get("C_DV_QUANTITY", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DV_QUANTITY));
			typeDictionary.Add(XName.Get("C_QUANTITY_ITEM", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_QUANTITY_ITEM));
			typeDictionary.Add(XName.Get("C_DV_STATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.C_DV_STATE));
			typeDictionary.Add(XName.Get("STATE_MACHINE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.STATE_MACHINE));
			typeDictionary.Add(XName.Get("STATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.STATE));
			typeDictionary.Add(XName.Get("NON_TERMINAL_STATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.NON_TERMINAL_STATE));
			typeDictionary.Add(XName.Get("TERMINAL_STATE", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TERMINAL_STATE));
			typeDictionary.Add(XName.Get("TRANSITION", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.TRANSITION));
			typeDictionary.Add(XName.Get("content_item", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.content_item));
			typeDictionary.Add(XName.Get("archetyped", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.archetyped));
			typeDictionary.Add(XName.Get("composition", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.composition));
			typeDictionary.Add(XName.Get("section", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.section));
			typeDictionary.Add(XName.Get("sub_section", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.sub_section));
			typeDictionary.Add(XName.Get("entry", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.entry));
			typeDictionary.Add(XName.Get("evaluation", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.evaluation));
			typeDictionary.Add(XName.Get("observation", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.observation));
			typeDictionary.Add(XName.Get("statement", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.statement));
		}
		
		private static void BuildElementDictionary() {
			elementDictionary.Add(XName.Get("archetype", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.archetype));
			elementDictionary.Add(XName.Get("Root", "http://schemas.openehr.org/v1"), typeof(global::schemas.openehr.org.v1.Root));
		}
		
		private static void BuildWrapperDictionary() {
			wrapperDictionary.Add(typeof(schemas.openehr.org.v1.archetype), typeof(global::schemas.openehr.org.v1.ARCHETYPEType));
			wrapperDictionary.Add(typeof(schemas.openehr.org.v1.Root), typeof(global::schemas.openehr.org.v1.archetyped));
		}
		
		protected internal static void AddSchemas(XmlSchemaSet schemas) {
			schemas.Add(schemaSet);
		}
		
		public static System.Type GetRootType() {
			return elementDictionary[XName.Get("archetype", "http://schemas.openehr.org/v1")];
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class XRootNamespace
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XDocument doc;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedElement rootObject;
		

	public archetype archetype {  get {return rootObject as archetype; } }

	public Root Root {  get {return rootObject as Root; } }
		
		private XRootNamespace() {
		}
		
		public XRootNamespace(archetype root) {
			this.doc = new XDocument(root.Untyped);
			this.rootObject = root;
		}
		
		public XRootNamespace(Root root) {
			this.doc = new XDocument(root.Untyped);
			this.rootObject = root;
		}
		
		public XDocument XDocument {
			get {
				return doc;
			}
		}
		
		public static XRootNamespace Load(string xmlFile) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Load(xmlFile);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRootNamespace Load(string xmlFile, LoadOptions options) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Load(xmlFile, options);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRootNamespace Load(TextReader textReader) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Load(textReader);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Load(textReader, options);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRootNamespace Load(XmlReader xmlReader) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Load(xmlReader);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRootNamespace Parse(string text) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Parse(text);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRootNamespace Parse(string text, LoadOptions options) {
			XRootNamespace root = new XRootNamespace();
			root.doc = XDocument.Parse(text, options);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public virtual void Save(string fileName) {
			doc.Save(fileName);
		}
		
		public virtual void Save(TextWriter textWriter) {
			doc.Save(textWriter);
		}
		
		public virtual void Save(XmlWriter writer) {
			doc.Save(writer);
		}
		
		public virtual void Save(TextWriter textWriter, SaveOptions options) {
			doc.Save(textWriter, options);
		}
		
		public virtual void Save(string fileName, SaveOptions options) {
			doc.Save(fileName, options);
		}
	}

	[GeneratedCode("LinqToXsd", "2.0.2.56002")]
	public partial class XRoot
	{
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XDocument doc;
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private XTypedElement rootObject;
		

	public global::schemas.openehr.org.v1.archetype archetype {  get {return rootObject as global::schemas.openehr.org.v1.archetype; } }

	public global::schemas.openehr.org.v1.Root Root {  get {return rootObject as global::schemas.openehr.org.v1.Root; } }
		
		private XRoot() {
		}
		
		public XRoot(global::schemas.openehr.org.v1.archetype root) {
			this.doc = new XDocument(root.Untyped);
			this.rootObject = root;
		}
		
		public XRoot(global::schemas.openehr.org.v1.Root root) {
			this.doc = new XDocument(root.Untyped);
			this.rootObject = root;
		}
		
		public XDocument XDocument {
			get {
				return doc;
			}
		}
		
		public static XRoot Load(string xmlFile) {
			XRoot root = new XRoot();
			root.doc = XDocument.Load(xmlFile);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRoot Load(string xmlFile, LoadOptions options) {
			XRoot root = new XRoot();
			root.doc = XDocument.Load(xmlFile, options);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRoot Load(TextReader textReader) {
			XRoot root = new XRoot();
			root.doc = XDocument.Load(textReader);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRoot Load(TextReader textReader, LoadOptions options) {
			XRoot root = new XRoot();
			root.doc = XDocument.Load(textReader, options);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRoot Load(XmlReader xmlReader) {
			XRoot root = new XRoot();
			root.doc = XDocument.Load(xmlReader);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRoot Parse(string text) {
			XRoot root = new XRoot();
			root.doc = XDocument.Parse(text);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public static XRoot Parse(string text, LoadOptions options) {
			XRoot root = new XRoot();
			root.doc = XDocument.Parse(text, options);
			XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
			if ((typedRoot == null)) {
				throw new LinqToXsdException("Invalid root element in xml document.");
			}
			root.rootObject = typedRoot;
			return root;
		}
		
		public virtual void Save(string fileName) {
			doc.Save(fileName);
		}
		
		public virtual void Save(TextWriter textWriter) {
			doc.Save(textWriter);
		}
		
		public virtual void Save(XmlWriter writer) {
			doc.Save(writer);
		}
		
		public virtual void Save(TextWriter textWriter, SaveOptions options) {
			doc.Save(textWriter, options);
		}
		
		public virtual void Save(string fileName, SaveOptions options) {
			doc.Save(fileName, options);
		}
	}
}
